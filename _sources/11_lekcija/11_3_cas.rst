11.3. Конструкција if-elif-else
###############################

Долазимо до гранања где се појављује више од две гране. Ситуација код
оваквих примера није више да ли је услов испуњен или није, него имамо више опција.
Овакве ситуације се решавају употребом ``if-elif-else`` програмске конструкције.
Погледајмо следећи задатак.

Агрегатно стање воде
''''''''''''''''''''

.. questionnote::

   Напиши програм који за дату температуру воде (у степеним Целзијуса)
   одређује њено агрегатно стање (сматраћемо да је вода у чврстом
   стању ако јој је температура строго мања од 0, да је у течном ако
   јој је температура између 0 и 100 степени, укључујући и те границе
   и да је у гасовитом стању ако јој је температура строго већа од 100
   степени).


Приметимо да програм има нови задатак, ситуација није више или једно или друго.
Имамо три могућности сада, или је чврсто или течно или гасовито.

На први поглед може нам се појавити следећа идеја:

На основу услова задатка може се формирати програм у којем се помоћу
три провере услова независно проверава припадност температуре једном
од три интервала :math:`(-\infty , 0]`, :math:`(0, 100)` и
:math:`[100, \infty)`.

.. activecode:: агрегатно_стање_1

   temperatura = 15

   if temperatura < 0:
       stanje = "čvrsto"
   if temperatura >= 0 and temperatura <= 100:
       stanje = "tečno"
   if temperatura > 100:
       stanje = "gasovito"

Иако ово решење ради, пример је како не треба решавати овакве
задатке. Због узастопних провера свих ``if`` услова (које се може избећи) ово решење
је неефикасно (траје дуже и непотребно задаје процесору задатке).
То би нарочито дошло до изражаја да имамо велики број ``if`` провера.

Ефикасно решење може креирати ако размишљамо на следећи начин
(тако да логички услови буду међусобно зависни):

- ако температура мања од :math:`0^{\circ}\,C` - агрегатно стање је
  чврсто;
- у противном (температура је већа или једнака :math:`0^{\circ}\,C`):
  ако је температура мања или једнака :math:`100^{\circ}\,C` (припада
  другом интервалу) - агрегатно стање je течно;
- у противном (температура је већа :math:`100^{\circ}\,C`) агрегатно
  стање је гасовито.

Такво постпуно проверавање услова се остварује помоћу конструкције
``if-elif-else`` и треба га увек користити.
  
.. activecode:: агрегатно_стање_2
		
   temperatura = 15
   
   if temperatura < 0:
       stanje = "čvrsto"
   elif temperatura <= 100:
       stanje = "tečno"
   else:
       stanje = "gasovito"

   print(stanje)

У општем случају, општи облик ове конструкције је следећи:

.. activecode:: elif

   if uslov_1:
       naredbe
   elif uslov_2:
       naredbe
   ...
   elif uslov_k:
       naredbe
   else:
       naredbe

Прва група наредби се извршава ако је први услов испуњен, друга ако
први није испуњен а други јесте, трећа ако прва два услова нису
испуњена, а трећи јесте и тако даље, све до последње групе наредби
која се извршава ако ниједан од наведених услова није
испуњен. Приметимо да се увек извршава тачно један блок наредби а затим
више нема провера услова и програм одмах излази из конструкције.

Приметимо да је срж следећег задатка била у томе да се одреди којем од
неколико надовезаних интервала припада дата вредност (то су били
интервали :math:`(-\infty, 0)`, :math:`[0, 100]` и :math:`(100,
+\infty)`). Задаци тог облика су чести и решавају се конструкцијом 
``if-elif-else`` како смо то овде описали.

Погледај наредни пример у коме задатак има четири могућности.

Успех ученика
'''''''''''''

.. questionnote::
    Напиши програм који у зависности од просека исписује успех ученика на крају године.
    Претпоставићемо да је ученик успешно прешао разред (нема недовољних оцена) односно да његов 
    успех може бити одличан, врло добар, добар или довољан.

.. activecode:: успех_ученика
		
   prosek = 4.23
   
   if prosek >= 4.5:
       uspeh = "odlican"
   elif prosek >= 3.5:
       uspeh = "vrlo dobar"
   elif prosek >= 2.5:
       uspeh = "dobar"
   else:
       uspeh = "dovoljan"

   print(uspeh)