
Условна петља
-------------

Као што смо видели петља ``for`` се користи да се неке наредбе понове
одређен, познат број пута, да се бројачком променљивом прође кроз неку
правилну серију бројева (узастопне бројеве или бројеве набројане са
неким кораком, попут оних у примеру игре жмурке) или да се прође кроз
све елементе листе, ниске или речника. У неким ситуацијама потребно је
богатије контролисање понављања, тј. потребно је неке наредбе
понављати све док је испуњен неки услов. За то се користи тзв. условна
петља тј. петља ``while``.

И петљу ``while`` можемо употребити да прођемо кроз серију правилно
размакнутих бројева. Урадимо поново задатак са игром жмурке.

Жмурке - петља ``while``
''''''''''''''''''''''''
.. level:: 1

.. activecode:: жмурке_while

   broj = 5                  # neka je broj = 5
   while broj <= 100:        # dok je broj <= 100:
       print(broj)            #    ispisi broj
       broj = broj + 5        #    uvecaj broj za 5

Приметимо да се у телу петље крије наредба ``broj = broj + 5`` која
проузрокује да се вредност променљиве ``broj`` промени тако што се
њена текућа вредност увећа за пет (о промени вредности променљиве и
наредбама овог облика више је речено у поглављу о променама вредности
променљивих). Изврши овај програм корак по корак и пажљиво прати како
се мењају вредности променљиве ``broj``.

Петљу ``while`` употребљавамо када не знамо унаред колико пута треба
извршити тело неке петље.

Цифре броја
'''''''''''
.. level:: 3

.. questionnote::

   Напиши програм који одређује и исписује цифре датог природног броја
   (већег од 1), кренувши од цифре јединица. На пример, ако корисник
   унесе број 1234, програм треба да испише 4, 3, 2, 1 (сваку цифру у
   посебном реду).

Раније смо видели да се последња цифра броја може одредити тако што се
одреди остатак при дељењу тог броја са 10, а да се она може обрисати
из броја тако што се пронађе целобројни количник тог броја са 10. Да
би се одредиле све цифре броја, потребно је понављати одређивање,
исписивање и брисање последње цифре броја, све док број не постане
нула.
   
.. activecode:: цифре_броја_петља

   n = int(input("Unesi broj:"))
   while n > 0:
       print(n % 10)
       n = n // 10

Изврши обавезно овај програм корак по корак и прати вредности
променљивих.  На пример, ако унесеш број ``123``, приликом првог
уласка у петљу проверава се да ли је ``123 > 0`` и пошто јесте,
исписује се ``123 % 10`` тј. ``3``, а број ``n`` се замењује са ``123
// 10`` тј. ``12``. Након тога се проверава да ли је ``12 > 0`` и
пошто јесте, исписује се ``12 % 10`` тј. ``2``, а број ``n`` се
замењује са ``12 // 10`` тј. ``1``. Након тога се проверава да ли је
``1 > 0`` и пошто јесте, исписује се ``1 % 10`` тј. ``1``, а број
``n`` се замењује са ``1 // 10`` тј. ``0``. На крају се проверава да
ли је ``0 > 0`` и пошто није, петља се завршава. Дакле, програм
исписује цифре ``3``, ``2`` и ``1``, баш како је и тражено.

Исправан унос оцене
'''''''''''''''''''

.. questionnote::

   Напиши програм који од ученика тражи да унесе оцену, све док не
   унесе оцену која је исправна (цео број између 1 и 5).

На почетку ћемо тражити да корисник унесе оцену и затим ћемо
исписивати поруку о грешци и тражити да се оцена уноси све док унета
оцена не припада интервалу од 1 до 5.
   
.. activecode:: исправан_унос_оцене

   ocena = int(input("Unesi ocenu od 1 do 5"))
   while not (1 <= ocena and ocena <= 5):
       print("Ocena nije ispravna.")
       ocena = int(input("Unesi ocenu od 1 do 5"))
   print("Ispravno  je uneta ocena", ocena) 

Препоручујемо ти да овај облик петље вежбаш и помоћу робота Карела,
јер у задацима које смо вам припремили постоји велики број њих који
захтевају употребу петље ``while``.

Угнежђене петље
---------------

Тело петље могу да чине било које наредбе, па и наребе гранања, али и
друге петље.

Таблица множења
'''''''''''''''
.. level:: 3

.. questionnote::

   Напиши програм који исписује таблицу множења бројева од 1 до n. На
   пример, за n=4 таблица треба да изгледа овако.

::

   1*1=1 1*2=2 1*3=3 1*4=4
   2*1=2 2*2=4 2*3=6 2*4=8
   3*1=3 3*2=6 3*3=9 3*4=12
   4*1=4 4*2=8 4*3=12 4*4=16

Основу решења овог задатка чини пролазак кроз све парове бројева од 1
до n. За то се користе угнежђена петља. Бројач спољашње петље одговара
броју врсте тј. првом чиниоцу (у првој врсти је први чинилац увек 1, у
другој 2, у трећој 3, у четвртој 4). Бројач унутрашње петље одговара
броју колоне тј. другом чиниоцу (у првој колони је други чинилац увек
1, у другој 2, у трећој 3, у четвртој 4).

Обратимо пажњу да се цела унутрашња петља понавља ``n`` пута, по
једном за сваку вредност бројача спољашње петље. Када се ``i`` постави
на ``1`` тада ``j`` редом узима све вредности од ``1`` до ``4``. Након
тога се се ``i`` постави на ``2``, а ``j`` из почетка узима све
вредности од ``1`` до ``4`` и тако даље.

У телу унутрашње петље знају се вредности бројача ``i`` и ``j`` и лако
можемо израчунати њихов производ и исписати одговарајућу
једнакост. Штампање ћемо подесити тако да се не прави размак између
делова (постављањем ``sep=""``) и тако да се не прелази у наредни ред,
већ размак након штампе (постављањем ``end=" "``). У нови ред ћемо
прелазити након завршетка рада унутрашње петље (тако што ће последња
наредба спољашње петље бити ``print()``).

Наредни програм је скоро готов - прошири наредбу ``print`` тако да се
израчунава и штампа одговарајући производ.
   
.. activecode:: таблица_множења

   n = 5		
   for i in range(1, n+1):
       for j in range(1, n+1):
           print(i, "*", j, "=", end=" ", sep="")
       print()

Домаћи задатак
''''''''''''''

Уради за домаћи наредних неколико задатака.

Сви парни бројеви прве стотине
''''''''''''''''''''''''''''''
   
.. questionnote::

   Напиши програм који исписује све парне бројеве прве стотине.

.. activecode:: парни_бројеви_прве_стотине

   for i in ???  # dopuni ovaj red
       print(i)

Распродаја ципела
'''''''''''''''''

.. questionnote::

   У току је распродаја ципела. Напиши програм који корисницима
   омогућава да израчунају снижену цену ципела које желе да купе. У
   петљи се уноси цена ципела и проценат снижења и исписује се снижена
   цена. Програм престаје са радом када се унесе цена 0.

Једна могућност је да учитамо цену на почетку провера, а затим да у
петљи ``while`` проверавамо да ли је цена различита од нуле и да, ако
јесте, израчунамо снижење и учитамо поново цену и проценат како
бисмо се припремили за следећи корак.
   
.. activecode:: снижене_цене_while1

   cena = float(input("Unesi cenu cipela:"))
   procenat = float(input("Unesi procenat sniženja:"))
   while cena != 0:
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)
       ??? # učitavamo novu cenu i procenat
   
Још једно могуће решење се заснива на томе да направимо бесконачну
петљу (петљу у ``while True:`` којој је услов увек испуњен), на чијем
ћемо почетку учитавати цену и проценат. Ако је цена нула, петљу ћемо
прекидати наредбом ``break``, а у супротном ћемо израчунавати и
исписивати снижени износ.

.. activecode:: снижене_цене_while2

   while True:
       cena = float(input("Unesi cenu cipela:"))
       procenat = float(input("Unesi procenat sniženja:"))
       if cena == 0:
           break
       snizena_cena = ???  # izračunavamo sniženu cenu
       print("Snižena cena:", snizena_cena)

.. reveal:: снижене_цене_while_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: снижене_цене_while_решење

      cena = float(input("Unesi cenu cipela:"))
      procenat = float(input("Unesi procenat sniženja:"))
      while cena != 0:
          snizena_cena = cena * (1 - procenat / 100)
          print("Snižena cena:", snizena_cena)
          cena = float(input("Unesi cenu cipela:"))
          procenat = float(input("Unesi procenat sniženja:"))

          
