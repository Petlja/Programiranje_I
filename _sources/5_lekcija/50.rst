5.1. Корњача графика
####################

Веома леп начин да се прикажу неки основни концепти програмирања је и
такозвана корњача-графика у којој се неки замишљени лик креће по
екрану остављајући притом траг који чини цртеж. У ранијим језицима
(пре свега у језику Logo из којег је концепт потекао) лик који је
цртао била је једна корњачица, а у Python-у можемо бирати између
неколико ликова (подразумевано цртање врши један троуглић који се
помера, али без обзира на то што је троугаоног облика, ми ћемо га
називати корњачом). За разлику од робота Карел који ради само на
порталу "Петља" и којега смо испрограмили специјално за вас, корњача
графика је саставни део језика Python и програме са корњачом можете
писати и на свом рачунару, ван прегледача веба и портала "Петља" (на
пример у развојном окружењу IDLE). Потребно је само да на свом
рачунару имате инсталирану подршку за програмски језик Python 3, коју
можете преузети са сајта `Python.org <https://www.python.org/>`_ (о
чему смо већ говорили у уводу).

Наредбе корњаче
---------------

Да бисмо у нашим програмима могли користити цртање уз помоћ корњаче,
потребно је прво да укључимо библиотеку за рад са корњачом (то се ради
тако што наведемо ``import turtle``). Након тога можемо издавати
наредбе нашој корњачи. Свака наредба ће почињати са ``turtle.???``.
Кроз неколико једноставних програма прикажимо основне наредбе корњаче.

Цртање линије
'''''''''''''
.. level:: 1

Корњача се на почетку налази у центру екрана и окренута је надесно (у
смеру истока). Наредбом ``turtle.forward(100)`` корњачи говоримо да се
помери напред (у смеру у ком је тренутно окренута) 100 корака и тако,
пошто наша корњача подразумевано са собом носи оловку којом црта,
постижемо да се на екрану нацрта дуж дужине 100 пиксела.

.. activecode:: корњача_forward
   :nocodelens:

   import turtle
   turtle.forward(100)

Да бисмо видели јасније како корњача ради, можемо јој променити брзину
кретања. ``turtle.speed(0)`` нам даје најбржу корњачу (након покретања
програма се одмах види готов цртеж), док ``turtle.speed(10)`` даје
најспорију корњачу (могуће је навести и било коју целобројну вредност
између 0 и 10).

.. activecode:: корњача_forward_speed
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.forward(100)


Боја и дебљина линије
'''''''''''''''''''''
.. level:: 1
   
Могуће је поставити различите параметре који одређују начин на који се
врши исцртавање. Да бисмо видели нашу корњачу (уместо стрелице која се
подразумевано приказује) можемо употребити наредбу
``turtle.shape("turtle")``. Помоћу ``turtle.color`` можемо променити
боју корњаче и њене оловке (и тако променити и боју трага тј. линија
које се цртају). Као параметар ове наредбе у заградама под наводницима
наводимо име жељене боје на енглеском језику. На пример, наредба
``turtle.color("red")`` поставља црвену боју. Помоћу ``turtle.width``
постављамо дебљину трага који корњача оставља, при чему се дебљина
задаје као параметар. На пример, наредбом ``turtle.width(5)``
постижемо да линије које се цртају буду дебеле 5 пиксела. 
Споменимо овде, мада ће касније бити више речи на ову тему, да се боје могу задати и 
у такозваном RGB ("red", "green", "blue") моделу. Свака боја се састоји од извесне количине црвене, зелене и плабе боје.
Навођењем броја за сваку од ове три боје (опсег од 0 до 255) дефинишемо једну боју.
Ово ћемо користити када будемо желели да исцртавамо фигуре које су различитих боја.

Динамичност боје приликом цртања фигура се може постићи и коришћењем функције ``random.randint(a,b)``, која враћа насумичан
број из интервала ``(a, b)``.

Да ли можеш да погодиш шта ће се добити покретањем наредног програма?
Пробај да погодиш, а онда након тога покрени програм и провери да ли
си био/била у праву.
   
.. activecode:: корњача_setparams
   :nocodelens:

   import turtle
   turtle.speed(5)
   turtle.shape("turtle")
   turtle.width(5)
   turtle.color("red")
   turtle.forward(50)
   turtle.color("green")
   turtle.forward(50)

Подизање оловке
'''''''''''''''
.. level:: 1
   
Корњача током свог кретања оставља траг. Међутим, некада је згодно да
корњачу померимо без цртањa. Наредбом ``turtle.penup()`` корњача
подиже своју оловку и након тога се креће по екрану не остављајући
траг све док јој се не изда наредба ``turtle.pendown()`` након чега
поново почиње да оставља траг током кретања. Допуни наредни програм
тако да корњача нацрта испрекидану линију која се састоји од три дужи.

.. activecode:: корњача_оловка
   :nocodelens:

   import turtle
   turtle.speed(10)
   
   turtle.forward(20)
   turtle.penup()
   turtle.forward(20)
   turtle.pendown()
   turtle.forward(20)
   
Отисци корњаче
''''''''''''''
.. level:: 1
   
Наредбом ``turtle.stamp()`` корњача може да остави свој отисак на месту на
ком се тренутно налази. 

.. activecode:: корњача_stamp
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.penup()
   turtle.stamp()
   turtle.forward(20)
   turtle.stamp()
   turtle.forward(20)
   turtle.stamp()

Окретање корњаче
''''''''''''''''
.. level:: 1
   
Корњача може мењати свој смер кретања тако што се окреће налево (у
смеру супротном смеру кретања казаљке на сату) или надесно (у смеру
кретања казаљке) за одређени број степени, за шта се користе наредбе
``turtle.left(n)`` и ``turtle.right(n)`` где је ``n`` број степени.

.. activecode:: корњача_rotate
   :nocodelens:

   import turtle
   turtle.speed(10)
   turtle.forward(50)
   turtle.left(60)
   turtle.forward(50)
   turtle.right(60)
   turtle.forward(50)


Резимирајмо све наредбе корњачи које смо до сада поменули.
   
=====================  ==========================================================================
``turtle.forward(n)``  корњача се помера напред за ``n`` корака
``turtle.left(n)``     корњача се окреће налево за ``n`` степени
``turtle.right(n)``    корњача се окреће надесно за ``n`` степени
``turtle.penup()``     корњача подиже оловку
``turtle.pendown()``   корњача спушта оловку
``turtle.color(c)``    боја оловке се поставља на боју ``c``
                       (назив је на енглеском језику, нпр. ``"red"``, ``"green"``, ``"blue"``)
``turtle.width(n)``    дебљина оловке се поставља на вредност ``n``
``turtle.stamp()``     корњача оставља свој отисак
``turtle.shape(s)``    корњача мења свој облик (нпр. ``"arrow"``, ``"turtle"``, ``"circle"``)
``turtle.speed(n)``    корњача мења своју брзину кретања од 0 (најбрже) до 10 (најспорије)
=====================  ==========================================================================

Хајде да се детаљније упознамо.
