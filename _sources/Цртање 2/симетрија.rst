20.1. Симетрично пресликане координате
======================================

У досадашњим цртежима смо координате углавном очитавали помоћу миша
или су унапред биле задате у тексту задатка. У овом поглављу ћемо
видети како неке координате можемо израчунати на основу познавања
неких других координата.

.. infonote::
   Биће нам веома важан међусобни однос положаја и
   величина објеката у прозору. Kao што знаш, увећавањем :math:`x` координате објекти се
   померају надесно, умањивањем :math:`x` координате на лево, умањивањем y
   координате померају се нагоре, а увећавањем :math:`y` координате, померају се
   надоле.

Симетрични кругови
------------------

Често ће цртежи које цртамо бити симетрични у односу на неку
хоризонталну или вертикалну праву. На пример, ако је прозор ширине 300
пиксела, тада је његова усправна оса удаљена 150 пиксела од леве ивице.
Ако желимо да два круга распоредимо симетрично око те усправне осе прозора
(на пример, желимо да то буду два ока) и ако први круг има центар у
тачки :math:`(110, 80)`, тада други круг треба да има центар у тачки
:math:`(190, 80)`. 

.. activecode:: krugovi_simetricni
   :passivecode: onlymain
   :autorun:
   :includesrc: _includes/krugovi_simetricni.py

Наиме, (хоризонтално) растојање од центра левог круга до
усправне осе треба да буде исто као растојање од те усправне осе до
центра десног круга. Пошто је лево растојање једнако 150 - 110 = 40, десно 
растојање ће такође бити 40, па је *x* координата центра десног круга
150 + 40 = 190. Тачке су на истој висини, па им је :math:`y` координата 
једнака. Веома слично се одређују координате и када је оса симетрије било 
која друга хоризонтална или вертикална права.


Симетрични правоугаоници и елипсе
---------------------------------

.. infonote::
   Поступак одређивања параметара правоугаоника и елипсе која је
   симетрично пресликана мало се разликује од оног за круг или дуж. Треба
   водити рачуна о томе да је горње **лево** теме правоугаоника описаног
   око тражене елипсе у ствари слика горњег **десног** темена
   правоугаоника описаног око познате елипсе. 

Нека је на слици доле плава елипса позната, 
а црвена тражена. Погледајте следећи програм и обратите пажњу на тачке :math:`M_1` и :math:`M_2`.
Такође, обратите пажњу и на горња лева темена ових правоугаоника. Да бисмо црвени правоугаоник нацртали као симетричну слику плавог, морамо пронаћи координате горњег левог темена црвеног правоугаоника. Да бисмо то урадили, морамо прво да на основу координата тачке :math:`M_1` пронађемо координате тачке :math:`M_2`, која је подједнако удаљена од усправне осе прозора као и тачка :math:`M_1`. Након тога, биће довољно да одузмемо ширину правоугаоника од :math:`х` координате тачке :math:`M_2` и добићемо :math:`х` координату горњег левог темена црвеног правоугаоника.

.. activecode:: pravougaonik_simetrija
   :passivecode: onlymain
   :autorun:
   :includesrc: _includes/pravougaonik_simetrija.py

.. topic:: Погледај видео:

   Погледај овај видео и сам/сама испробај да напишеш програм који центрира правоугаонике код себе на рачунару. 

    .. ytpopup:: D9zh50VLpeA
        :width: 735
        :height: 415
        :align: center 

Мачка
'''''

.. questionnote::

   Напиши програм који црта главу мачке. Глава мачке је потпуно
   симетрична у односу на средину прозора.

Уши ове мачке могу да се прикажу као попуњени троуглови. Како се уши
надовезују на главу, по два темена сваког троугла могу да буду
изабрана са више слободе (довољно је да буду негде у глави). Осим два
троугла који представљају уши, имамо још:

- два круга (глава и врх њушке)
- шест елипси (очи, зенице и делови њушке)
- шест линија (бркови)

Приликом цртања користе се боје ``gray``, ``darkgray``, ``black``,
``yellow`` и ``green``.

Да видиш слику коју треба да нацрташ, притисни дугме "Прикажи пример". Можеш да очитаваш само координате облика на левој половини слике, а они су већ нацртани у програму. X-координате тачака на десној половини слике се не могу
очитавати, али се могу израчунати користећи симетрију.

.. activecode:: PyGame_practice1a_cat
   :nocodelens:
   :enablecopy:
   :modaloutput:
   :playtask:
   :includexsrc: _includes/macka_simetricna_pomoc.py

   prozor.fill(pg.Color("white")) # bojimo pozadinu ekrana u belo

   pg.draw.circle(prozor, pg.Color("gray"), (150, 160), 100) # glava
   pg.draw.polygon(prozor, pg.Color("gray"), [(50, 30), (70, 100), (110, 100)]) # levo uvo
   ??? # desno uvo
   pg.draw.ellipse(prozor, pg.Color("yellow"), ( 90, 110, 40, 60)) # levo oko
   ??? # desno oko
   pg.draw.ellipse(prozor, pg.Color("green"),  (105, 135, 20, 30)) # leva zenica
   ??? # desna zenica
   pg.draw.ellipse(prozor, pg.Color("darkgray"),  (80, 180, 70, 30)) # levi deo njuske
   ??? # desni deo njuske
   pg.draw.circle(prozor, pg.Color("black"), (150, 190), 10) # vrh njuske
   pg.draw.line(prozor, pg.Color("black"), (90, 190), (20, 160), 2) # levi gornji brk
   pg.draw.line(prozor, pg.Color("black"), (90, 195), (20, 195), 2) # levi srednji brk
   pg.draw.line(prozor, pg.Color("black"), (90, 200), (20, 220), 2) # levi donji brk
   ??? # desni gornji brk
   ??? # desni srednji brk
   ??? # desni donji brk


.. reveal:: PyGame_practice1a_cat_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   Дат је комплетан програм, можете да га испробате и овде.
	       
   .. activecode:: PyGame_practice1a_cat_solution
      :nocodelens:
      :enablecopy:
      :modaloutput:
      :includesrc: _includes/macka_simetricna.py





