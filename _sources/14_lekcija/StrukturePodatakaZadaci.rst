Структуре података - додатни задаци за вежбу
############################################

Торке/Листе
-----------

Да ли је број био извучен?
''''''''''''''''''''''''''
.. level:: 1
       
.. questionnote::

   Листа садржи бројеве извучене у лото извлачењу. Напиши програм који
   за дати број проверава да ли је био извучен.

.. activecode:: Лото_бројеви

   brojevi = [3, 4, 17, 21, 23, 27, 33]
   broj = int(input("Unesi broj: "))
   # dovrši program


Да ли је просек ближи најмањем или највећем елементу листе?
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
.. level:: 2

.. questionnote::

   Напиши програм који за дату листу бројева одређује да ли је просек
   те листе ближи најмањем или највећем њеном елементу или је
   подједнако удаљен од њих.

.. activecode:: просек_ближи

   lista = [48, 53, 26, 71, 83]
   prosek = 0   # ispravi ovaj red
   najmanji = 0 # ispravi ovaj red
   najveci = 0  # ispravi ovaj red
   if True:             # ispravi ovaj uslov
       print("Ближи је најмањем")
   elif True:           # ispravi ovaj uslov
       print("Ближи је највећем")
   else:
       print("Подједнако је удаљен")

Најјефтинији за динар
'''''''''''''''''''''
.. level:: 2

.. questionnote::

   Дате су цене три производа. Ко купи сва три, најјефтинији ће добити
   за динар. Колико ће платити?

Један начин је да сортирамо листу од три цене тако да цене у листи
буду уређене од најмање до највеће, а затим да први елемент листе
(цену најјефтинијег производа) заменимо са 1 и на крају саберемо
елементе листе. Нагласимо да, пошто желимо да променимо цену неког
производа, морамо употребити листу, а не торку.

.. activecode:: најјефтинији_за_динара_1

   cene = [1420, 1799, 1569]
   cene_po_redu = sorted(cene)
   ???              # cenu najjeftinijeg proizvoda postavljamo na dinar
   print(???)       # ispisujemo zbir elemenata promenjene liste

Рецимо и да смо задатак могли решити и без сортирања, тако што бисмо
од укупне цене сва три производа одузели цену најјефтинијег производа,
па добијени износ увећали за један динар.

.. activecode:: најјефтинији_за_динар_2   

   cene = [1420, 1799, 1569]
   print(???)

Ниске
-----

Дужа ниска
''''''''''
.. level:: 1
           
.. questionnote::

   Напиши програм у којем се учитавају две ниске и исписује дужина
   дуже од њих.

.. activecode:: дужина_дуже_ниске

   niska1 = input()
   niska2 = input()
   duzina_duze = 0    # ispravi ovaj red
   print(duzina_duze)

.. reveal:: дужина_дуже_ниске_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: дужина_дуже_ниске_решење	   

      niska1 = input()
      niska2 = input()
      duzina_duze = max(len(niska1), len(niska2))
      print(duzina_duze)

Број самогласника
'''''''''''''''''
.. level:: 1
      
.. questionnote::

   Напиши програм који учитава неки и затим пребројава колико у њему
   има самогласника (претпоставити да се текст састоји само од малих
   слова латинице).

.. activecode:: број_самогласника_ниске

   tekst = input()
   broj_samoglasnika = tekst.count("a")   # doupni ovaj red
   print(broj_samoglasnika)

Позив на број
'''''''''''''
.. level:: 1
   
.. questionnote::

   Сваки корисник система обједињене наплате рачуна приликом уплате
   наводи позив на броју. Тај позив се састоји од цифара. Прве две
   цифре су ознака месеца за који се уплаћује, наредне четири ознака
   године, а наредних шест су идентификација корисника. На пример,
   ``032018742562`` значи да корисник са бројем ``742562`` уплаћује
   рачун за март 2018. године. Напиши програм који за унети позив на
   број исписује месец, годину и идентификацију корисника.

.. activecode:: позив_на_број

   poziv_na_broj = "032018742562"
   mesec = poziv_na_broj[0:2]
   godina = ""           # ispravi ovaj red
   identifikacija = ""   # ispravi ovaj red
   print(mesec, godina, identifikacija)

Декодирање студентског индекса
''''''''''''''''''''''''''''''
.. level:: 2
   
.. questionnote::

   Сваки студент на факултету има свој број индекса. На пример,
   бројеви индекса су ``123/2017``, ``421/2016`` или ``12/2015``.
   Дефиниши функцију која за дати број индекса у облику ниске одређује
   редни број студента и годину његовог уписа (у облику бројева).
   
.. activecode:: делови_индекса
		
   def rasclani_indeks(indeks):
       # ispravni naredni kod
       redni_broj = ""
       godina_upisa = ""
       return (redni_broj, godina_upisa)

   ====
   from unittest.gui import TestCaseGui

   class myTests(TestCaseGui):
       def testOne(self):
          self.assertEqual(rasclani_indeks("123/2017"), (123, 2017), "123/2017")
          self.assertEqual(rasclani_indeks("421/2016"), (421, 2016), "421/2016")
          self.assertEqual(rasclani_indeks("12/2015"), (12, 2015), "12/2015")
   myTests().main()


.. reveal:: рашчлани_индекс_решење_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: рашчлани_индекс_решење
		
      def rasclani_indeks(indeks):
         p = indeks.find("/")
         redni_broj = int(indeks[0:p])
         godina_upisa = int(indeks[p+1:])
         return (redni_broj, godina_upisa)   

Сакривање слова
'''''''''''''''
.. level:: 1
         
.. questionnote::

   Напиши програм у којем се уноси реч од бар 5 слова и исписује се
   реч која се добија kада се њена прва два и последња два слова
   замене са ``__``. Нпр, за унето ``petlja`` исписује се ``__tl__``.

.. activecode:: реч_са_доњим_цртама
   
   rec = input()
   print()  # dopuni ovaj red
   
   
Нинџа-корњача
'''''''''''''
.. level:: 2

.. questionnote::

   Нинџа-корњача се креће кроз лавиринт тако што слуша упутства на
   тајном језику. Горе се на том језику каже rif, доле el, лево oma, а
   десно lun. Напиши програм који помаже корњачи да пронађе излаз из
   лавиринта.

.. image:: ../../_images/string_kornjaca_lavirint.png
   :width: 400px
   :align: center

.. activecode:: корњача_језик
		
   gore  = "rif"
   dole  = "el"
   levo  = "oma"
   desno = "lun"
   put = (gore + desno) * 3 + desno * 3 + ""   # popravi ovaj red
   print(put)

.. fillintheblank:: fill_корњача
		
    Упутство за корњачу је: |blank|

    - :riflunriflunriflunlunlunlunelomaelomaeloma: Тачно
      :.*: Покушај поново!

Робот у лавиринту
'''''''''''''''''
.. level:: 2
   
.. questionnote::

   Робот се у просторији креће на основу задатог упутства. Упутство је
   низ команди Горе, Доле, Лево и Десно (на пример, ``uputstvo = "Горе
   Лево Лево Десно Лево Доле Горе Доле Горе Десно Горе"``). У сваком
   кораку он се помера за једно поље. Поља квадратног облика су
   поређана као поља на шаховској табли и свако поље има свој број
   врсте и колоне. Централно поље у просторији је обележено са (0, 0),
   и од њега бројеви врста и колона расту на доле и на десно, а
   опадају на горе и на лево (као што је приказано на слици). Одреди
   на ком пољу ће се налазити робот након извшавања команди.

.. image:: ../../_images/grid_coordinates.png
   :width: 300px
   :align: center

Задатак можемо најлакше решити тако што одредимо колико пута се робот
померио у сваком од четири смера. Број врсте у којој се налази на
крају ће бити разлика између броја корака које је направио на доле и
броја корака које је направио на горе, док ће број колоне бити разлика
између броја корака које је направио на десно и броја корака које је
направио на лево.

Исправе означене редове у наредном програму. Робот на крају завршава
на пољу (-2, -1).

.. activecode:: бројање_команди

   uputstvo = "Горе Лево Лево Десно Лево Доле Горе Доле Горе Десно Горе"
   gore  = uputstvo.count("Горе")
   dole  = 0    # ispravi ovaj red
   levo  = 0    # ispravi ovaj red
   desno = 0    # ispravi ovaj red
   vrsta  = dole - gore
   kolona = 0   # ispravi ovaj red
   print(vrsta, kolona)
   
Скупови
-------
   
Панграми
''''''''
.. level:: 2

.. questionnote::

   Панграми су реченице које садрже сва слова неке абецеде или
   азбуке. Пожељно је да панграми буду што краћи. Панграми се обично
   користе да би се приказали фонтови на рачунарима (јер корисник кроз
   веома кратак текст може видети како изгледају сва
   слова). Најчувенији панграм на енглеском језику је *the quick brown
   fox jumps over the lazy dog*. Неки од панграма на српском језику су
   и следеће реченице:

   - *Фијуче ветар у шибљу, леди пасаже и куће иза њих и гунђа у оџацима.*
   - *Ниџо, чежњиво гледаш фотељу, а Ђура и Мика хоће позицију себи.*
   - *Дебљој згужвах смеђ филц — њен шкрт џепчић.*

   Напиши програм који за дату реченицу проверава да ли је панграм
   тако што исписује број различитих слова која се у њој јављају.

Дефинисаћемо скуп малих слова ћирилице и пронаћи ћемо пресек тог скупа
и скупа слова која се јављају у реченици (у којој су помоћу метода
``lower()`` сва слова претворена у мала).
   
.. activecode:: панграми

   recenica = "Фијуче ветар у шибљу, леди пасаже и куће иза њих и гунђа у оџацима."
   slova = set("абвгдђежзијклљмнњопрстћуфхцчџш")
   slova_u_recenici = ???
   print(len(slova_u_recenici))


.. reveal:: панграми_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење
                
   .. activecode:: панграми_решење

      recenica = "Фијуче ветар у шибљу, леди пасаже и куће иза њих и гунђа у оџацима."
      slova = set("абвгдђежзијклљмнњопрстћуфхцчџш")
      slova_u_recenici = set(recenica.lower()) & slova   
      print(len(slova_u_recenici))
       
Речници
-------
   
Испиши главни град
''''''''''''''''''
.. level:: 1
   
.. questionnote::

   У речнику су задати главни градови неколико држава. Напиши програм
   који за унету државу исписује главни град или пријављује да град те
   државе није познат на основу података у речнику.

.. activecode:: Главни_градови

   glavni_grad = {"Србија": "Београд", "Хрватска": "Загреб", "Црна Гора": "Подгорица"}
   drzava = input("Унеси назив државе: ")
   if True:    # ispravi ovaj red
       print()  # ispravi ovaj red
   else:
       print("Није познат главни град државе " + drzava)

Петље
-----
       
Сви префикси
''''''''''''
.. level:: 2
       
.. questionnote::

   Напиши програм који исписује све почетне делове речи која се уноси
   са улаза.  На пример, ако је реч ``petlja``, програм ипсисује
   ``p``, затим ``pe``, ``pet``, ``petl``, ``petlj`` и на крају
   ``petlja``.

.. activecode:: сви_префикси

   # dopuni naredni kod
   rec = ???("Unesi reč:")
   for i in range(???):
       print(rec[???:???])

   
.. reveal:: сви_префикси_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење
	       
   .. activecode:: сви_префикси_решење
    
      rec = input("Unesi reč:")
      for i in range(0, len(rec)):
          print(rec[0:i+1])

Сваки елемент листе у посебном реду
'''''''''''''''''''''''''''''''''''
.. level:: 1
          
.. questionnote::

   Направи листу која садржи имена твојих омиљених певача, певачица
   или група, а затим у петљи испиши њене елементе, сваки у посебном
   реду.

.. activecode:: певачи

   # dopuni naredni program
   muzicari = []
   for ???
       print()

Просеци свих ученика
''''''''''''''''''''
.. level:: 2
       
.. questionnote::

   Дата је листа која за сваког ученика садржи име, презиме и листу
   оцена из програмирања. Напиши програм који исписује име и презиме
   сваког ученика, затим његов просек оцена, а затим и сваку оцену у
   посебном реду.

.. activecode:: оцене

   ucenici = [("Pera", "Perić", [3, 4, 4, 3, 5]),
              ("Marija", "Marjanović", [5, 5, 5, 4, 5])]
   for (ime, prezime, ocene) in ???:  # dopuni ovaj red
       print(ime, prezime, ???)  # dopuni ovaj red
       for ??? in ???:  # dopuni ovaj red
           print(ocena)

   
.. reveal:: оцене_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење


   .. activecode:: оцене_решење

      ucenici = [("Pera", "Perić", [3, 4, 4, 3, 5]),
                 ("Marija", "Marjanović", [5, 5, 5, 4, 5])]
      for (ime, prezime, ocene) in ucenici:
          print(ime, prezime, sum(ocene) / len(ocene))
          for ocena in ocene:  # dopuni ovaj red
              print(ocena)
