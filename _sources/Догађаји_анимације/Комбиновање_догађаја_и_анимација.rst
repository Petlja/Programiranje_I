30.1. Комбиновање догађаја и анимација
======================================

У неким ситуацијама желимо да комбинујемо анимације и догађаје. На
пример, желимо да мишем померамо анимиране ликове по екрану. То није
тешко остварити коришћењем техника које смо већ објаснили у поглављима
о анимацијама и догађајима. У наредним програмима обично ће корисник
дефинисати три помоћне функције: ``crtaj``, ``novi_frejm`` и
``obradi_dogadjaj`` и њихов ће задатак бити исти као и у програмима
које смо до сада писали.

Коришћење библиотеке PyGameBg омогућава да се функцији ``frame_loop``
као трећи параметар зада и функција ``obradi_dogadjaj`` чиме се
постиже да се приликом преласка на сваки наредни фрејм обраде сви
догађаји који су наступили између приказивања два фрејма. 

.. infonote::
    Нагласимо да се догађаји не обрађују чим наступе, па ако је фреквенција смењивања
    фрејмова ниска, тада корисник може осетити мали застој у одзиву
    програма.

Корачање до циља
''''''''''''''''

.. questionnote::

   Лик стоји на малој платформи која се мишем може померати
   лево-десно. Када се платформа помери, лик полако корача све док не
   стигне до ње.

.. activecode:: setanje_do_platforme
   :nocodelens:
   :modaloutput: 
   :enablecopy:
   :playtask:
   :includexsrc: _includes/setanje.py

   # učitavamo u listu slike setanje1.png, setanje2.png, ..., setanje5.png
   slike_unapred = []   # niz u koji dodajemo slike
   slike_unazad = []   # niz u koji dodajemo slike
   for i in range(1, 6):
       naziv_slike = "setanje" + str(i) + ".png"  # gradimo naziv slike od delova
       slika = pg.image.load(naziv_slike)
       slike_unapred.???
       slike_unazad.append(pg.transform.flip(slika, True, False))  # pravimo sliku u ogledalu
   slike = slike_unapred
    
   slika = 0   # indeks tekuće slike
   x = 0       # x-koordinata leve ivice slike
   cilj_x = 0  # x-koordinata do koje treba da stigne leva ivica slike
    
   def crtaj():
       prozor.fill(pg.Color("white"))                          # bojimo pozadinu prozora u belo
       prozor.blit(slike[slika], (x, 0))                       # prikazujemo sliku
       # crtamo platformu
       cilj_sredina_x = ???                                   # x koordinata sredine slike - sredina platforme
       A = (cilj_sredina_x - 20, visina - 5)                  # krajnje tačke platforme
       B = (???, ???)
       pg.draw.line(prozor, pg.Color("black"), A, B, 10)
    
   def novi_frejm():
       global slika, x
       # slučaj kada je lik levo od platforme
       if x < cilj_x:                        # ako je lik levo od platforme
           x += 4                            #   pomeramo ga 4 piksela nadesno
           slika = (slika + 1) % len(slike)  #   prelazimo na sledeću sliku
           crtaj()                           #   poovo crtamo
       # slučaj kada je lik desno od platforme
       ???

    
   def obradi_dogadjaj(dogadjaj):
       global cilj_x, slike
       if dogadjaj.type == pg.KEYDOWN:                                  # taster na tastaturi
           if dogadjaj.key == pg.LEFT:                               # strelica na desno
               if cilj_x + slike[slika].get_width() <= sirina:   #   ako desna ivica slike ne ispada van desnog dela ekrana
                   cilj_x += 20                                  #     pomeramo platformu 20 piksela nadesno
                   slike = slike_unapred                         #     lik je okrenut nadesno
           # dodaj obradu srelice na desno
           ???



Коришћење тајмера
-----------------

Још једно решење за прављење анимација je да се направи
*тајмер* (енгл. *timer*) који ће откуцавати у правилним временским
интервалима. Тајмер почиње са откуцавањем позивом функције
``pg.time.set_timer``. Сваки пут када откуца, генерише се
догађај који смо навели као први аргумент у позиву функције
``pg.time.set_timer``, док је други аргумент у позиву број милисекунди
након којих поново откуцава. Програмер, дакле, одређује који ће се
догађај догађати као последица откуцаја тајмера (најчешће се користи
догађај ``pg.USEREVENT`` који се не догађа аутоматски, већ се управо
користи за овакве сврхе).

.. infonote::
    Откуцај тајмера је догађај као и сваки други, па се и основна
    структура програма поклапа са оном коју смо користили у програмима у
    којима смо обрађивали догађаје. 

Прегледности ради, догађај откуцаја
тајмера можемо обрађивати у посебној помоћној функцији. Посматрајмо
наредни кôд заснован на библиотеци PyGameBg.

.. activecode:: animacija_event_wait_funkcije
   :passivecode: true

   import pygame as pg, pygamebg

   # otvaramo prozor
   pygamebg.open_window(...)


   # crtamo scenu
   def crtaj():
       ...

   # tajmer je otkucao - prelazimo na novi frejm
   def obradi_otkucaj_tajmera():
       ...
       return True

   # obrada događaja
   def obradi_dogadjaj(dogadjaj):
       if dogadjaj.type == pg.USEREVENT:   # otkucaj tajmera
           return obradi_otkucaj_tajmera()
       elif dogadaj.type == ???            # ostali dogadjaji
           ...
           return True
       return False

   pg.time.set_timer(pg.USEREVENT, 100)    # tajmer ce otkucavati nakon svakih 100 milisekundi

   # započinjemo petlju obrade događaja
   pg.event_loop(crtaj, obradi_dogadjaj)
   
Поновним позивом функције ``set_timer`` можемо променити интервал у
ком ће тајмер откуцавати.

Прикажимо неколико примера у којима се користи тајмер.

Померање анимираног лика
''''''''''''''''''''''''

.. questionnote::

   Напиши програм који омогућава померање стрелицама лика који све
   време корача.

.. reveal:: setanje_i_pomeranje_dodatni_zadatak
    :showtitle: За оне који желе више
    :hidetitle: Сакриј

    .. infonote::
        По завршетку започетог кода, покушај да овај задатак урадиш и без тајмера, коришћењем петље
        засноване на фрејмовима. Да би одзив тастатуре био задовољавајући
        тј. да би се догађаји обрађивали чешће, мораћеш да повећаш фреквенцију
        фрејмова (250 милисекунди одговара фреквенцији од 4 фрејма по секунди)
        и да исту слику приказујеш више пута.

.. activecode:: setanje_i_pomeranje
   :nocodelens:
   :modaloutput: 
   :enablecopy:
   :playtask:
   :includexsrc: _includes/setanje3.py

   # učitavamo u listu slike setanje1.png, setanje2.png, ..., setanje5.png
   slike = []   # niz u koji dodajemo slike
   for i in range(5):
       naziv_slike = "setanje" + str(i + 1) + ".png"  # gradimo naziv slike od delova
       slike.append(pg.image.load(naziv_slike))   # učitavamo sliku i dodajemo je na kraj niza
    
   slika = 0            # redni broj slike koja se prikazuje
   (x, y) = (100, 100)  # polozaj slike
    
   def crtaj():
       prozor.fill(pg.Color("white"))              # bojimo pozadinu prozora u belo
       ???                                         # prikazujemo trenutnu sliku
       
   def obradi_otkucaj_tajmera():
       global slika
       slika = (slika + 1) % 5                    # prelazimo na narednu sliku
       return True
       
   def obradi_dogadjaj(dogadjaj):
       global ???
       if dogadjaj.type == pg.USEREVENT:          # otkucaj tajmera
          return obradi_otkucaj_tajmera()
       elif dogadjaj.type == pg.KEYDOWN:          # pritisnut je taster na tastaturi
           ???                                    # obrađujemo četiri strelice
           return True