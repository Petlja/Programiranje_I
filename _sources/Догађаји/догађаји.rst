29.1. Догађаји увод
===================

Као што је то обично случај у програмима са графичким корисничким
интерфејсом и PyGame програми врше интеракцију са корисником
коришћењем догађаја. Наиме, сваки пут када корисник помери миша,
притисне неко дугме миша или тастер на тастатури систем то бележи у
облику догађаја који се региструје у нашем програму и на шта можемо
одреаговати извршавањем неког програмског кода.

Обрада догађаја у свим програмима које ћемо писати ће се заснивати на
постојању функције ``obradi_dogadjaj`` чији ће задатак бити да
анализира сваки догађај који се десио и да на основу тога промени
стање програма (представљено најчешће преко глобалних
променљивих). Информације о сваком догађају упаковане су у објекат
``dogadjaj`` који ће се аутоматски прослеђивати као аргумент ове
функције.

Поред функције ``obradi_dogadjaj`` дефинисаћемо и функцију ``crtaj``
чији ће задатак бити да исцрта прозор на основу текућег стања
програма. Пошто ћемо многе догађаје игнорисати (на пример, у неком
програму ћемо реаговати само на померање миша, а не и на тастере
тастатуре), неће бити потребе да се сцена поново исцртава након сваког
догађаја. Зато ћемо усвојити конвенцију да функција
``obradi_dogadjaj`` враћа логичку вредност којом се назначава да ли је
потребно поново исцртати сцену.

Постоји неколико начина да се у програму реализује реаговање на
догађаје и о њима више можеш прочитати `овде
<https://petlja.org/biblioteka/r/lekcije/pygame-prirucnik-gim/dogadjaji-cas14_obradadogadjaja>`_. Ми ћемо користити библиотеку
*PyGameBg* у којој ће се догађаји обрађивати у главној петљи која се
покреће функцијом ``pygamebg.event_loop`` чији су параметри функција
за цртање ``crtaj`` и функција обраде догађаја ``obradi_dogadjaj``.

Типови догађаја
---------------

Функција ``obradi_dogadjaj`` као аргумент прима догађај који се десио
и потребно је прво да утврди његов тип (да ли је то био притисак неког
тастера на тастатури, клик неког дугмета миша, померање миша и
слично). Сваки догађај чува податак о типу догађаја коме можемо
приступити помоћу поља ``type`` и стога ће се у функцији
``obradi_dogadjaj`` најчешће вршити гранање на основу вредности овог
поља. У програмима заснованим на коришћењу библиотеке PyGameBg, обрада
догађаја ће најчешће функционисати на следећи начин.

.. activecode:: tipovi_dogadjaja_pygamebg
   :passivecode: true

   import pygame as pg, pygamebg

   # otvaramo prozor
   pygamebg.open_window(sirina, visina, "...")

   # globalno stanje programa
   ...

   # crtanje scene
   def crtaj():
       ...   # na ovom mestu se vrši crtanje

   # obrada dogadjaja
   def obradi_dogadjaj(dogadjaj):
       global ...   # promenljive koje se mogu promeniti na osnovu nekog dogadjaja
       if dogadjaj.type = pg.???:   # ako je u pitanju događaj tipa ???
           ...
           return True     # treba ponovo iscrtati scenu
       elif dogadjaj.type = pg.???: # ako je u pitanju događaj tipa ???
           ...
           return True     # treba ponovo iscrtati scenu
       return False        # ne treba ponovo iscrtati scenu

   # započinjemo petlju obrade događaja
   pygamebg.event_loop(crtaj, obradi_dogadjaj)
