8.1. Основне аритметичке операције и примена
############################################

Рачунар или компјутер (енгл. computer) је справа која рачуна
тј. справа која је направљена тако да може веома брзо и ефикасно да
изводи рачунске операције над бројевима. Рачунање се назива и
аритметика (од грчке речи ἀριθμός тј. аритмос која значи број,
бројање, рачунање), а рачунске операције се називају и аритметичке
операције.

Сабирање, одузимање, множење
----------------------------

О аритметичким операцијама и њиховој примени си учио/учила још у нижим
разредима.

- Основна аритметичка операција је **сабирање**. Збир бројева 3 и 5 се у
  математици представља као *3 + 5*. У програмском језику Python
  користи се идентичан запис ``3 + 5``.
- Поред сабирања можемо разматрати **одузимање**. Разлика бројева 8 и 2 се
  у математици представља као *8 - 2*. У програмском језику Python
  користи се идентичан запис ``8 - 2``.
- Још једна од основних операција је и **множење**. Производ бројева 4 и 6 се
  у математици представља као *4 · 6*. У програмском језику Python множење
  се означава помоћу оператора ``*`` и производ бројева 4 и 6 се записује
  као ``4 * 6``.

Програмски језик Python, наравно, уме и да дели, да израчунава остатак
при дељењу и цео део количника и много штошта друго. О овим операцијама
ћемо говорити на неком од наредних часова.

.. infonote::

   Приметимо да смо око оператора куцали размаке (на пример, ``3 +
   5``, ``8 - 2`` или ``4 * 6``). Ти размаци нису неопходни и исправно
   је написати и ``3+5`` или ``4*6``. Програмери воле да куцају размак
   око сваког оператора (знака операције) да би добили текст програма
   који лепше изгледа и који се лакше може прочитати.

Ако на свом рачунару покренеш интерпретатор за програмски језик
Python, вредност неког израза (на пример, ``3 + 5`` или ``4 * 6``)
можеш израчунати тако што тај израз просто укуцаш (иза знакова
``>>>``) и притиснеш тастер Enter. На пример,

::

  Python 3.7.4 (default, Jul  9 2019, 03:52:42) 
  [GCC 5.4.0 20160609] on linux
  Type "help", "copyright", "credits" or "license" for more information.
  >>> 3 + 5
  8
  >>> 4 * 6
  24

Међутим, за вежбу ти чак није потребно да инсталираш Python на свом
рачунару, већ и у овом случају програме можеш уносити и у поља која се
налазе на страницама овог курса. У та поља се уносе
комплетни програми (додуше, они ће у почетку бити прилично кратки) и
стога, да би се одштампала вредност неког израза, рачунару мораш
некако рећи да он ту вредност одштампа. *Штампај* се на енглеском
језику каже *print*, па се онда вредност израза може добити на следећи
начин.
  
.. activecode:: сабирање_и_множење
   :autorun:
      
   print(3 + 5)
   print(4 * 6)

Подесили смо да се овај програм покрене чим се ова страница учита, тако
да одмах можеш видети резултате његовог израчунавања (одштампане
бројеве 8 и 24).

Пробај сада да прилагодиш претходни програм тако да исписује разлику
бројева 174 и 83 и производ бројева 24 и 36. Када направиш измене
програм покрени дугметом **Покрени програм**. Ако је све урађено како
треба, требало би да видиш резултате 91 и 864.


Рад из командне линије и писање скриптова
-----------------------------------------

Покретањем интерпретатора за Python (на пример, покретањем окружења
Python IDLE), приказује се командни прозор у који се могу уносити
изрази чија се вредност одмах израчучнава и приказује.

.. image:: ../../_images/idle-shell.png
   :width: 400px   
   :align: center

Ово је погодно само за веома кратка израчунавања. У случају када
желимо да вршимо мало сложенија израчунавања, обично пишемо
једноставне програме који се називају и **скриптови**. Писање новог
скрипта у окружењу IDLE започињемо командом менија `File → New File`,
након чега се отвара едитор програмског кода у који уписујемо наш
скрипт. Када је скрипт написан, покрећемо командом менија `Run → Run
Module` или пречицом на тастатури `F5`. Пре него што се скрипт изврши,
неопходно га је сачувати (уобичајено је да то буде у датотеци са
екстензијом `.py`).

.. image:: ../../_images/idle-editor.png
   :width: 500px   
   :align: center

Изрази у скрипту се израчунавају, али се њихова вредност не приказује
аутоматски. Ако желимо да прикажемо вредност неког израза, потребно је
да употребимо наредбу ``print``. Сваки пут када се скрипт покрене,
резултати његовог рада се приказују у командном прозору.

.. infonote::

   Рецимо и да је скриптове могуће креирати помоћу било ког едитора
   чистог текста (могуће је користити и Notepad) и након чувања могуће
   их је покретати из командне линије оперативног система (најчешће
   тако што се покрене команда ``python <ime_skripta>`` или ``python3
   <ime_skripta>``).


У страницама овог курса се скриптови могу уносити у одговарајућа поља, 
а затим покретати дугметом
``Покрени програм``. Пошто се ради о програмима, за сваки жељени приказ резултата неопходно је
употребити наредбу ``print``. За разлику од окружења IDLE, пре
покретања скрипта у страницама овог курса програме није потребно (ни могуће) сачувати.

Смедеревска тврђава
'''''''''''''''''''

Покушај да решиш наредни, веома једноставан задатак на неколико начина:

- израчунај вредност помоћу обичног калкулатора твог оперативног система;
- израчунај вредност уносом израза у командну линију Python интерпретатора;
- израчунај и прикажи вредност писањем једноставног скрипта у прозору који је
  приказан у склопу ове веб-странице;
- напиши скрипт у окружењу IDLE, сачувај га и покрени.


.. level:: 1

.. questionnote::

   Смедеревска тврђава има облик троугла страница 550m, 502m и
   400m. Колики је обим тврђаве (када шеташ око тврђаве, колико ћеш
   метара прећи)?


.. activecode:: тврђава

   # напиши скрипт на овом месту

Ако је исправно написан, твој скрипт треба да испише вредност 1452.


Сложени изрази, приоритет оператора и заграде
---------------------------------------------
   
Некада је потребно да решавамо задатке који укључују више рачунских
операција и тада можемо користити сложеније изразе, потпуно исто како
смо навикли у математици. На пример, посматрајмо следећи задатак, који
је преузет из једне збирке задатака из математике.

Производ збира и разлике
''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Израчунај производ збира бројева 874 и 437 и разлике бројева 915 и 364. 

   
Уз помоћ рачунара можеш веома једноставно решити овај задатак (чак
једноставније него помоћу дигитрона тј. калкулатора). Једино је важно
да умеш исправно да запишеш израз којим се тражено израчунавање
изражава. У математици би се одговарајући израз записао као
*(874+437)·(915-364)*. Ако се сетиш да се множење изражава знаком
``*`` и, ако ти кажемо да у програмском језику Python можеш
употребљавати заграде на исти начин као у математици, онда ти је јасно
да претходни математички задатак можеш лако решити тако што употребиш
израз ``(874 + 437) * (915 - 364)``, тј. наредни програм (притисни
дугме **Покрени програм** да би се програм извршио).

.. activecode:: производ_збира_и_разлике

   print((874 + 437) * (915 - 364))		

Заграде су у претходном сложеном изразу неопходне, јер је приоритет
операција потпуно исти као у математици (прво се израчунава оно што је
у заградама, а множење и дељење се врши пре сабирања и
одузимања).

Покушај да претходни задатак урадиш и у окружењу IDLE и то најпре тако
што ћеш израз ``(874 + 437) * (915 - 364)`` унети у командни прозор и
притиснути тастер Enter, а затим и тако што ћеш направити скрипт који
израчунава и приказује вредност тог израза.

Уради наредни тест да провериш да ли си потпуно разумео/разумела
досадашње излагање.
   
.. mchoice:: vrednost_izraza_1
   :answer_a: 15
   :answer_b: 30
   :answer_c: 50
   :answer_d: 125
   :correct: b
   :feedback_a: Знак ``+`` означава сабирање, а знак ``*`` множење.
   :feedback_b: Тачно!
   :feedback_c: Обрати пажњу и на приоритет операција (исти је као и у математици).
   :feedback_d: Знак + означава сабирање, а знак * множење.
		
   Која је вредност израза ``5 + 5 * 5``?

.. mchoice:: vrednost_izraza_2
   :answer_a: 15
   :answer_b: 30
   :answer_c: 50
   :answer_d: 125
   :correct: c
   :feedback_a: Знак ``+`` означава сабирање, а знак ``*`` множење.
   :feedback_b: Обрати пажњу на то да прво треба да израчунаш оно што
                је у заградама.
   :feedback_c: Тачно!
   :feedback_d: Знак + означава сабирање, а знак * множење.
		
   Која је вредност израза ``(5 + 5) * 5``?

.. mchoice:: vrednost_izraza_3
   :answer_a: print((184 + 72) * (273 - 194))
   :answer_b: print((184 - 72) * (273 - 194))
   :answer_c: (184 - 72) * (273 - 194)
   :answer_d: print(184 - 72 * 273 - 194)
   :correct: b
   :feedback_a: Обрати пажњу на то шта је збир, а шта разлика.
   :feedback_b: Тачно!
   :feedback_c: Да би програм исписао резултат, мораш користити print.
   :feedback_d: Обрати пажњу на приоритет операција. Да ли ти требају заграде?
   
   Који од наредних програма израчунава и исписује производ разлике
   бројева 184 и 72 и разлике бројева 273 и 194.

Погледај наредни видео:

.. ytpopup:: pogysWedlXo
    :width: 735
    :height: 415
    :align: center
   
Променљиве - имена међурезултата
--------------------------------
   
Писање сложених израза се може избећи, а програм се може начинити мало
разумљивијим ако међурезултате именујемо. Погледајмо наредни пример
програма који такође решава један од претходних задатака.

.. activecode:: производ_збира_и_разлике_1
		
   zbir = 874 + 437
   razlika = 915 - 364
   proizvod = zbir * razlika
   print(proizvod)

   
Збиру смо доделили име ``zbir``, разлици име ``razlika``, а производу
име ``proizvod`` (уместо ``zbir`` и ``razlika`` могли смо, на пример,
користити и имена ``prvi_cinilac``, ``drugi_cinilac``). Иако се на
овај начин добија програм који мало дужи него полазни, он је мало
разумљивији, јер се његовим читањем може јасно видети да се прво тражи
израчунавање збира, затим разлике и затим њиховог производа. Програм постаје
јаснији пре свега захваљујући пажљивом одабиру имена која смо
употребили и веома је важно у програмима користити имена која читаоцу
програма дају назнаке шта тај програм заправо израчунава. Рачунар
једнако успешно извршава програм ма која имена да употребиш.  Ипак,
имај на уму да програме читају и људи који те програме пишу,
исправљају и дорађују, а њима је прилично важно да текст програма лако
разумеју. Често си читалац програма управо ти, тако да
давањем илустративних имена променљивама данас помажеш заправо себи у
будућности.

.. infonote::
   
   Имена која смо дали међурезултатима се у програмирању називају
   **променљиве**. Променљиве су јако важан концепт о коме ће бити
   много више речи касније. До тада ћемо их користити само као имена 
   придружена одређеним вредностима.


Осим за променљиве, у програмима користимо имена и за функције, низове и друге 
елементе језика о којима ће тек бити речи. Приликом бирања имена за било који 
од тих елемената језика, треба да имаш на уму каква имена су исправна, а каква нису.

.. level:: 2
   :container:

   .. infonote::

        За имена (каже се и **идентификаторе**) која можемо користити у програмима 
        постоје прецизна правила.  Прво, мала и велика слова се разликују -
        није исто да ли смо написали ``zbir`` или ``Zbir``. У именима можемо да 
        користимо само слова, бројеве и подвлаку
        (симбол ``_``), коју ћемо користити да повежемо више речи у једно
        име. У именима не можемо користити размаке, зарезе и слично, нити
        име можемо започети цифром. Дозвољена имена су, на пример, ``x``,
        ``obim``, ``drugi_sabirak``, ``broj_sekundi``, ``a2``, а недозвољена
        су, на пример, ``3d_grafika`` (јер почиње цифром), ``prvi sabirak``
        (јер садржи размак) и ``jezik_c#`` (јер садржи недозвољени знак
        ``#``).
       
        .. mchoice:: identifikatori
         :multiple_answers:
         :answer_a: xyZ
         :answer_b: Indijana_Dzons_3
         :answer_c: 3stvari
         :answer_d: zdravo-svima
         :correct: a,b
         :feedback_a: Било која комбинација слова је у реду.
         :feedback_b: Подвлаке се могу користити да повежу више делова у целину.
         :feedback_c: Цифра не сме бити први карактер.
         :feedback_d: Цртице се не смеју користити у склопу имена (цртица
                      тј. минус заправо означава одузимање).
       
         Шта од наведеног може бити исправно име променљиве у језику
         Python? Означи све тачне одговоре.


Решавање задатака у општим бројевима
------------------------------------

Коришћењем променљивих алгоритам можемо описати коришћењем назива, а
не вредности улазних величина, што често даје разумљивији
програм и даје могућност да се исти алгоритам лакше примени и на друге
вредности улазних величина, јер су измене програма једноставније. 
На тај начин лако решавамо читаву групу сродних задатака (у којима је
проблем који се решава исти, али су бројеви различити). Илуструјмо ово
на једном једноставном примеру.

Склапање коцкица
''''''''''''''''
.. level:: 1

Јова склапа играчкице од лего-коцкица. Жели да склопи један ауто за
који су му потребна 4 точка, 8 великих и 4 мале коцке и један бицикл
за који су му потребна 2 точка и 6 малих коцкица. Ако је цена точка 79
динара, цена мале коцке 59, а цена велике коцке 99 динара, напиши
програм који израчунава колико је динара потребно Јови да би купио све
потребне делове.

Једно могуће решење задатка је да се резултат израчуна формирањем
једног сложеног израза.

.. activecode:: склапање_коцкица_1
		
   print(4*79 + 8*99 + 4*59 + 2*79 + 6*59)

Иако овај програм коректно израчунава решење, он је прилично
неразумљив и тешко га је прилагодити, ако се, на пример, промене цене
делова. Преформулишимо сада програм коришћењем променљивих.

.. activecode:: склапање_коцкица_2
		
   cena_tocak = 79
   cena_velika = 99
   cena_mala = 59

   cena_automobil = 4*cena_tocak + 8*cena_velika + 4*cena_mala
   cena_bicikl = 2*cena_tocak + 6*cena_mala

   cena_ukupno = cena_automobil + cena_bicikl
   print(cena_ukupno)

Иако је добијени програм очигледно дужи, он је много разумљивији. Сви
улазни подаци, који могу да се промене, наведени су у посебним променљивим 
на почетку скрипта. Ако се, на пример, промене цене делова, променићемо их 
на само једном месту на почетку скрипта и покренути скрипт поново, 
чиме ћемо добити резултат за нове улазне
величине. Слично, ако Јова одлучи да склопи два или више аута, програм 
ћемо лако прилагодити.


Учитавање података при покретању програма
-----------------------------------------

У програмском језику Python и програмским језицима у којима се пишу
скриптови уобичајено је да се подаци задају на почетку програма и у
наредним програмима ћемо често користити такав приступ. Међутим,
постоје програмски језици у којима текст програма не мора бити
доступан пре покретања и у којима није могуће (или није тако једноставно) изменити улазне податке
у самом програму пре његовог покретања. Стога је честа пракса да се вредности улазних
података не уписују у текст програма, већ да се програм напише тако да се
приликом његовог покретања од корисника тражи да унесе вредности
улазних података. То је могуће урадити и у Python скриптовима.

Један начин да се затражи од корисника да унесе неки цео број је да се
у програму наведе ``broj = int(input("Unesi broj:"))``. Ако желимо да
допустимо да се уносе и реални бројеви, тада у програму треба навести
``broj = float(input("..."))``. Уместо променљиве ``broj``, наравно,
унети број може да се запамти у било којој другој променљивој. Такође,
порука може бити сликовитија и текст ``Unesi broj`` између двоструких
наводника је могуће променити (на пример, користићемо текст ``Unesi
cenu točka:``).

Погледајмо сада како изгледа претходни програм када се напише на тај
начин.

.. activecode:: склапање_коцкица_3
		
   cena_tocak = int(input("Unesi cenu točka:"))
   cena_velika = int(input("Unesi cenu velike kocke:"))
   cena_mala = int(input("Unesi cenu male kocke:"))

   cena_automobil = 4*cena_tocak + 8*cena_velika + 4*cena_mala
   cena_bicikl = 2*cena_tocak + 6*cena_mala

   cena_ukupno = cena_automobil + cena_bicikl
   print(cena_ukupno)


Ниске
-----

Приметили смо да смо приликом учитавања (наредбе ``input``) или исписа
(наредбе ``print``) текст који се дословно приказује кориснику
наводили између наводника. Такав текст назива се **ниска** или
**стринг** (од енглеске речи string која значи ниска). На пример,
ниске су ``"Zdravo"`` или ``"Programski jezik Python."``.  Уместо
двоструких равноправно се могу користити и једноструки наводници (на
пример, ``'Zdravo'``), међутим, да бисмо вас мање збуњивали, ми ћемо
увек користити двоструке наводнике.

Ниска може да се састоји од слова (малих и великих), цифара,
размака, интерпункцијских знакова (на пример тачака, зареза, упитника,
узвичника) и слично. Све те знакове једним именом називамо
**карактери**. Неки програмски језици подржавају само веома узак скуп
карактера (од слова је могуће користити само слова енглеске абецеде),
међутим, програмски језик Python3 користи широк скуп карактера који
обухвата и све карактере потребне за писање на већини језика света,
укључујући и слова ћириличног и латиничног писма која се користе у
српском језику.

.. infonote::

   Поменути основни скуп карактера довољан само за запис текста на
   енглеском језику назива се ASCII, док се овај знатно шири скуп карактера
   назива Unicode.

.. infonote::

   У стандардном језику Python 3 могуће је и имена променљивих написати ћирилицом,
   међутим, то некада може довести до проблема (ако се, на пример,
   едитор текста који се користи да се програм откуца не подеси
   адекватно, или ако одређена имплементација језика није потпуна), 
   тако да ћемо за сваки случај имена променљивих увек
   писати латиницом, без коришћења српских слова (š, ž, č, ...).

.. level:: 2
   :container:
      
   .. infonote::

     Ако текст садржи наводнике или неке друге специјалне
     карактере, потребно је те карактере обележити обрнутим косим цртама. На
     пример, ``"Rekao je: \"Zdravo, svima\"."`` Ове косе црте се не
     исписују приликом извршавања програма и штампања ниски.

     .. activecode:: escape_sequence
		   
         print("Rekao je: \"Zdravo, svima\".")   
         
Текст може бити сачуван и у променљивама. На пример,

.. activecode:: поздрави_перу

   ime = "Pera Perić"
   print("Zdravo, ti se zoveš", ime)
   
Текст можемо учитати и од корисника, након покретања програма. За то
можемо употребити функцију ``input``. На пример, наредни програм пита
корисника како се зове, а онда га поздрави.

.. activecode:: поздрави_корисника

   ime = input("Unesi svoje ime: ")
   print("Zdravo, ti se zoveš", ime)

Приметимо да се приликом учитавања бројева заправо учитава текст
(помоћу ``input``), а онда се из учитаног текста одређују бројеви који
су тим текстом представљени. Таква претварања (конверзије) текста у
број врше се помоћу ``int`` и ``float``.

Радом са текстом и нискама ћемо се много детаљније бавити током наредних
часова.
         
Аутоматско тестирање програма
-----------------------------

У програмирању је веома битно да програми које напишеш увек дају тачне
резултате. Најчешћи начин да се провери коректност програма је да се
он покрене на већем броју унапред припремљених тест-примера (у којима
су дате различите вредности улазних параметара) и да се провери да ли
на њима даје очекиване резултате. Ако програм на њима исправно ради,
веома вероватно је да ће исправно радити и на свим другим
примерима. У наставку само вам обезбедили аутоматско тестирање
на једном броју задатака, а први такав је управо следећи задатак.


.. questionnote::

   Марко је прочитао књигу за три дана. Првог дана је прочитао 100
   страна. Другог дана је прочитао 17 страна више него првог, а трећег
   два пута више него другог. Колико та књига има страна? Напиши
   програм који то одређује, а ради исправно и ако се број страна
   прочитаних првог дана промени.

Програм је у тренутном облику неисправан (увек исписује
нулу). Притисни дугме **Тестирај програм** и видећеш да резултати који
се добију нису једнаки оним очекиваним и приказаће ти се поља црвене
боје, што указује на грешке.

.. activecode:: читање
   :runortest: prvi_dan, ukupno
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   prvi_dan  = 100
   # -*- acsection: main -*-
   drugi_dan = 0      # popravi ovaj red
   treci_dan = 0      # popravi ovaj red
   ukupno = 0         # popravi ovaj red
   # -*- acsection: after-main -*-
   print(ukupno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for prvi_dan, ukupno in [(84, 387), (122, 539), (153, 663)]:
             self.assertEqual(acMainSection(prvi_dan = prvi_dan)["ukupno"],ukupno,"Ако је први дан прочитао %s стране, број страна књиге је %s." % (prvi_dan, ukupno))
   myTests().main()

Поправи претходни програм тако што ћеш изменити само оне редове који
су обележени. Када завршиш, поново притисни
дугме **Тестирај програм**. Ако је све како треба, приказаће ти се три
поља зелене боје. Наиме, када притиснеш то дугме програм се тестира на
основу неколико унапред припремљених тестова. Програм се извршава 
неколико пута (за сваки тест по једном), али тако да се уместо
вредности ``100`` променљивој ``prvi_dan`` додељују неке друге
вредности (у овом конкретном примеру покушава се са вредностима
``84``, ``122`` и ``153``). Након тога програм који си
написао/написала израчунава укупан број страна и резултат који је твој
програм израчунао се пореди са стварним бројем страна књиге за тај
тест (за улаз ``84`` стварни број страна је ``387``, за улаз ``122``
стварни број страна је ``539``, а за улаз ``153`` стварни број страна
је ``663``). Ако су добијени и стварни резултат једнаки, за ту почетну
вредност се приказује зелена боја, а ако не, приказује се црвена боја.
   
Извршавање корак по корак
-------------------------

Једна корисна техника која помаже да се боље разуме начин рада неког
програма, али и да се уоче и исправе евентуалне грешке у програму је
то да се програм извршава корак по корак, тј. да се извршава једна по
једна његова наредба, при чему се након сваке извршене наредбе прати
вредност променљивих у програму.

.. infonote::

   Извршавање програма корак по корак уз праћење вредности свих
   међурезултата је јако важна техника за откривање грешака у програмима,
   које се назива **дебаговање** (требљење од бубица). У старим
   рачунарима који су били велики као читава соба, дешавало се да
   мољци и сличне бубе уђу у рачунар и проузрокују неки квар. Од тада
   се грешке у раду рачунара, па и грешке у програмима називају **багови** тј. **бубице**.
   
Илуструјмо ову могућност на сајту Петље кроз наредни, једноставан,
пример.

Воћњак са јабукама
''''''''''''''''''

.. level:: 1

.. questionnote::
   
   Пера је засадио 380 стабала јабуке. Ђура је засадио 142 стабла јабука
   више од Пере, а Мика је засадио два пута више од Пере. Колико су
   стабала засадили заједно?


.. activecode:: јабуке
   :runortest: pera, zajedno
   :enablecopy:
   
   Исправи следећи програм тако да исправно израчунава колико су
   стабала засадили заједно (програм треба исправно да ради и ако се
   број стабала које је засадио Пера промени).
   
   ~~~~
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   pera = 380
   # -*- acsection: main -*-
   djura = ???
   mika = ???
   zajedno = pera + djura + mika
   # -*- acsection: after-main -*-
   print(zajedno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for pera, zajedno in [(100, 542), (200, 942)]:
             self.assertEqual(acMainSection(pera = pera)["zajedno"],zajedno,"Ако је Пера засадио %s стабала, заједно су засадили %s стабала." % (pera, zajedno))
   myTests().main()
   
Притисни сада дугме **Корак по корак**. Оно ти пружа могућност да
програм извршаваш корак по корак. Дугметом *Next* извршаваш
наредну наредбу (ону обележену црвеном стрелицом). Наредба која је
претходно извршена обележена је светло-плавом стрелицом. У делу
*Frames* можеш видети вредности свих променљивих,
док у прозору изнад тога можеш видети излаз програма (резултате одштампане
наредбом ``print``).

И у овом задатку је омогућено аутоматско тестирање, па дугметом
**Тестирај програм** провери да ли је твоје решење тачно.




