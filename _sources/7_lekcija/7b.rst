Задаци
------
  
Технике које смо до сада научили довољне су нам да бисмо решили велики број
математичких задатака. Размотримо неколико.

   
Године маме и тате
''''''''''''''''''
.. level:: 1

.. questionnote::

   Милица има 4 године, њена мама има 7 пута више година него она, а њен
   тата има 8 пута више година него она. Колико је година Миличин тата старији
   од њене маме?
   
.. parsonsprob:: godine

   Поређај делове кода тако да представљају исправно решење овог задатка.
   -----
   milica = 4
   =====
   mama = 7 * milica
   tata = 8 * milica
   =====
   razlika = tata - mama
   =====
   print(razlika)

   
Река Морава
'''''''''''
.. level:: 1

.. questionnote::

   Велика Морава је дугачка 185km и настаје од Јужне Мораве, која је
   90km дужа, и Западне Мораве, која је 123km дужа од ње. Колика је
   укупна дужина ове три реке?


.. activecode:: морава

   velika_morava = 185
   juzna_morava = velika_morava + 90
   zapadna_morava = velika_morava + 123
   ukupno = ??? # ispravi ovaj red
   print(ukupno)

Немањићи
''''''''
.. level:: 1

.. questionnote:: 

  Стефан Немањић је постао краљ Србије 1217 и владао је 11
  година. После њега је Радослав владао до 1234. године, па Владислав,
  који је владао 9 година и предао престо брату Урошу Првом, који је
  владао до 1276. У којим временским периодима су владали ови српски
  краљеви?

.. activecode:: немањићи
		
  Stefan_pocetak = 1217
  Stefan_kraj = 1217 + 11
  Radoslav_pocetak = Stefan_kraj
  Radoslav_kraj = 1234
  Vladislav_pocetak = 0
  Vladislav_kraj = 0
  Uros_pocetak = 0
  Uros_kraj = 0
  print("Стефан:", Stefan_pocetak, "-", Stefan_kraj)
  print("Радослав:", Radoslav_pocetak, "-", Radoslav_kraj)
  print("Владислав:", Vladislav_pocetak, "-", Vladislav_kraj)
  print("Урош:", Uros_pocetak, "-", Uros_kraj)

Исправи претходни програм тако да исправно израчуна периоде у којима
су владали краљеви. Ако све урадиш како треба добићеш следеће резултате:

::

   Стефан: 1217 - 1228
   Радослав: 1228 - 1234
   Владислав: 1234 - 1243
   Урош: 1243 - 1276

Напредније коришћење ``print``
''''''''''''''''''''''''''''''
.. level:: 3
   
Приметимо да смо у претходном задатку додали испис имена краљева и
цртица између почетка и краја њихове владавине тако што смо тај текст
који смо желели да се испише ставили под знаке навода (нпр. навели смо
``"Стефан: "``). О раду са текстом ће више речи бити касније. Такође,
приметимо да смо овај пут навели неколико ствари унутар ``print``,
раздвојених зарезима. У тим ситуацијама ``print`` штампа сваку од њих,
развајајући их размацима (на пример, када се изврши нареба
``print("baci", 5)`` исписује се ``baci 5``).

.. infonote::

   Као што смо рекли, ствари наведене унутар ``print`` раздвајају
   се са по једним размаком. То се може променити тако што се на
   крају ``print`` наведе ``sep=""`` и унутар наводника наведе шта
   ће се користити да раздвоји делове. На пример, ако се наведе
   ``print(1, 2, 3, sep="")`` исписаће се ``123``, а ако се наведе
   ``print(1, 2, 3, sep=", ")`` исписаће се ``1, 2, 3``. Након
   сваког извршавања ``print``, прелази се у нови ред (наредни
   позиви ``print`` штампаће свој резултат у наредном реду). И то
   се може променити тако што се на крају ``print`` наведе
   ``end=""`` и унутар наводника оно што ће се користити након
   целог исписа. На пример, ``print(1, 2, end="")`` проузрокује да
   се након исписа не пређе у нови ред, већ да наредни испис иде
   непосредно након вредности ``2``.

Једначина
'''''''''
.. level:: 1

.. questionnote::

   Напиши програм који израчунава који број треба додати броју 123780
   да се добије број 321732.

Нажалост, Python не може директно да решава једначине. Ти мораш да
напишеш израз којим се непозната вредност израчунава на основу
познатих, а онда ти он може помоћи у рачунању.

.. activecode:: непознати_сабирак

   prvi_sabirak = 123780
   zbir = 321732
   drugi_sabirak = 0    # popravi resenje
   print(drugi_sabirak)

Провери да ли је твој програм израчунао тачно решење.
   
.. fillintheblank:: fill_једначина
		    
   Колико је решење?

   - :^197952$: Тачан одговор
     :.*: Од збира одузми познати сабирак"

Ако у решењу нису коришћене вредности, већ само називи променљивих,
програм би требало да исправно решава задатке и за друге
бројеве. Тестирај га на тест-примерима које смо припремили.

.. activecode:: непознати_сабирак_тест
   :runortest: prvi_sabirak, zbir, drugi_sabirak

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   prvi_sabirak = 123780
   zbir = 321732
   # -*- acsection: main -*-
   drugi_sabirak = 0    # popravi resenje
   # -*- acsection: after-main -*-
   print(drugi_sabirak)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for prvi_sabirak, zbir, drugi_sabirak in [(100, 230, 130), (200, 942, 742)]:
             self.assertEqual(acMainSection(prvi_sabirak = prvi_sabirak, zbir = zbir)["drugi_sabirak"],drugi_sabirak,"Ако је једначина %s + x = %s, тада је x = %s." % (prvi_sabirak, zbir, drugi_sabirak))
   myTests().main()
   
   
   
Фудбалски терен
'''''''''''''''

Илуструјмо кроз решење наредног, мало сложенијег задатка, разне
приступе решавању једног те истог задатка и продискутујмо предности и
мане разних решења.

.. level:: 2

.. questionnote::

   Дужина фудбалског терена је 115 метара, а ширина 80 метара. Ана трчи
   по правоугаоној стази која је са сваке стране терена споља удаљена
   по 5 метара. Колико она претрчи, ако се зна да је оптрчала терен 3
   пута.

.. image:: ../../_images/teren.jpg
   :width: 400px   
   :align: center

Ана претрчи троструку дужину обима стазе. Да бисмо израчунали обим
стазе потребно је да израчунамо њену дужину и ширину. Стаза је 10
метара дужа од терена (по 5 метара са сваке стране), и 10 метара шира
од терена (по 5 метара са сваке стране). Обим је једнак двострукој
вредности збира дужине и ширине, па задатак можемо решити на следећи
начин.
	   
.. activecode:: терен_1

   print(3 * 2 * (125 + 90))

Овај програм коректно израчунава претрчан пут, међутим, има неколико
недостатака.  Прво, неке величине смо рачунали у глави, уместо да
препустимо рачунару да их израчуна (на пример, 125 смо добили као
115 + 2·5), чиме смо себи створили непотребан посао и, што је још
важније, увели у програм могуће рачунске грешке (за разлику од
рачунара који у рачуну не греше баш никада, људи у рачуну често
греше). Даље, читајући текст програма није баш јасно зашто се резултат
добија баш на начин на који је то урађено у програму. Такође, овакав
програм није потпуно једноставно изменити. Размислимо шта би се десило
када би се улазни подаци мало променили, тј. када би бисмо посматрали
терен дугачак 110 метара, широк 80 метара и стазу која је на растојању
10 метара од терена. Да бисмо изменили програм, потребно би било да
поново у глави израчунамо дужину и ширину стазе, што је непотребно
компликовано.

Наредни програм је мало бољи од претходног, али и даље је неразумљив,
а да бисмо га променили морамо бити пажљиви и улазне податке изменити
на свим местима (на пример, број 5 је потребно заменити два пута).

.. activecode:: терен_2

   print(3 * 2 * ((110 + 2 * 5) + (80 + 2 * 5)))

Погледајмо сада другачије решење истог задатка.
	   
.. activecode:: терен_3

   duzina_terena = 115
   sirina_terena = 80
   rastojanje = 5
   broj_krugova = 3
   duzina_staze = duzina_terena + 2 * rastojanje
   sirina_staze = sirina_terena + 2 * rastojanje
   obim_staze = 2 * (duzina_staze + sirina_staze)
   pretrcan_put = broj_krugova * obim_staze
   print(pretrcan_put)

Приметимо неколико ствари. Програм је дужи, па га је сигурно било теже
написати. Све улазне податке (дужину и ширину терена, као и
растојање стазе од терена) смо именовали на самом почетку
програма. Такође, именовали смо и све међурезултате (дужину и ширину
стазе, њен обим и претрчан пут), чиме смо постигли да је оном ко чита
програм сада потпуно јасно како се заправо дошло до траженог резултата
и зашто су формуле такве какве јесу. Помоћу дугмета **Корак по корак**
лако можемо сазнати све међурезултате које смо именовали, а ако у
неком тренутку то буде потребно и њих можемо једноставно исписати
коришћењем ``print``. Такође, постигли смо и то да је измене улазних
података сада потпуно једноставно урадити - само је потребно променити
податке дате на почетку програма.

Као што смо видели, наш систем ти омогућава да се твој програм
аутоматски тестира за различите улазне податке. Покушај сада да
допуниш наредни програм и да покренеш механизам тестирања и видећеш да
ли твој програм ради исправно за различите улазне податке.

.. activecode:: терен_3_test
   :runortest: duzina_terena, sirina_terena, rastojanje, broj_krugova, pretrcan_put
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   duzina_terena = 115
   sirina_terena = 80
   rastojanje = 5
   broj_krugova = 3
   # -*- acsection: main -*-
   duzina_staze = 0  # popravi ovaj red
   sirina_staze = 0  # popravi ovaj red
   obim_staze = 0    # popravi ovaj red
   pretrcan_put = 0  # popravi ovaj red
   # -*- acsection: after-main -*-
   print(pretrcan_put)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for duzina_terena, sirina_terena, rastojanje, broj_krugova, pretrcan_put in [(110, 80, 7, 4, 1744), (75, 65, 3, 10, 3040)]:
             self.assertEqual(acMainSection(duzina_terena = duzina_terena, sirina_terena = sirina_terena, rastojanje = rastojanje, broj_krugova = broj_krugova)["pretrcan_put"],pretrcan_put,
	     "Ако је терен дугачак %s, а широк %s метара и ако Ана трчи %s круга на %s метара од ивице, тада она пређе %s метара." % (duzina_terena, sirina_terena, broj_krugova, rastojanje, pretrcan_put))
   myTests().main()

На крају, можемо направити програм који ће при свом покретању питати
корисника да унесе одговарајуће податке.

.. activecode:: терен_4

   duzina_terena = int(input("Unesi dužinu terena:"))
   sirina_terena = int(input("Unesi širinu terena:"))
   rastojanje    = int(input("Unesi rastojanje od staze do terena:"))
   broj_krugova  = int(input("Unesi broj krugova koje Ana pretrči:"))
   duzina_staze = duzina_terena + 2 * rastojanje
   sirina_staze = sirina_terena + 2 * rastojanje
   obim_staze = 2 * (duzina_staze + sirina_staze)
   pretrcan_put = broj_krugova * obim_staze
   print(pretrcan_put)

   
.. questionnote::

   Покушај сада да измениш претходни програм тако што ћеш
   претпоставити да Ана трчи по правоугаоној стази удаљеној неколико
   метара од ивице, али на унутра. Претпостави да су дужина и ширина
   терена (``duzina_terena``, ``sirina_terena``), растојање стазе од
   ивице терена (``rastojanje``), као и број кругова које треба да
   претрчи (``broj_krugova``) задати на почетку текста
   програма. Измени само редове који су обележени, а остало не
   дирај. Ако све урадиш како треба, након покретања програма
   (дугметом **Покрени програм**) и аутоматског тестирања сва поља ће
   бити зелене боје.

   
.. activecode:: терен_унутра_тест
   :runortest: duzina_terena, sirina_terena, rastojanje, broj_krugova, pretrcan_put
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   duzina_terena = 115
   sirina_terena = 80
   rastojanje = 5
   broj_krugova = 3
   # -*- acsection: main -*-
   duzina_staze = 0   # popravi ovaj red
   sirina_staze = 0   # popravi ovaj red
   obim_staze = 0     # popravi ovaj red
   pretrcan_put = 0   # popravi ovaj red
   # -*- acsection: after-main -*-
   print(pretrcan_put)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for duzina_terena, sirina_terena, rastojanje, broj_krugova, pretrcan_put in [(100, 80, 5, 2, 640), (95, 85, 20, 7, 1400), (110, 70, 12, 4, 1056)]:
             self.assertEqual(acMainSection(duzina_terena = duzina_terena, sirina_terena = sirina_terena, rastojanje = rastojanje, broj_krugova = broj_krugova)["pretrcan_put"],pretrcan_put,
	     "Ако је терен дугачак %s, а широк %s метара и ако Ана трчи %s круга на %s метара од ивице, тада она пређе %s метара." % (duzina_terena, sirina_terena, broj_krugova, rastojanje, pretrcan_put))
   myTests().main()

.. reveal:: терен_тест_решење
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   Ево једног начина да се дође до тачног решења.
   
   .. activecode:: терен_тест_решење1

     duzina_terena = 100
     sirina_terena = 80
     rastojanje = 5
     broj_krugova = 2
	       
     duzina_staze = duzina_terena - 2*rastojanje
     sirina_staze = sirina_terena - 2*rastojanje
     obim_staze = 2 * (sirina_staze + duzina_staze)
     pretrcan_put = broj_krugova * obim_staze

     print(pretrcan_put)

   
Позиви на концерт
'''''''''''''''''

.. level:: 2

.. questionnote::

   Мирјана и Лидија певају у истом хору и припремају се за концерт.
   Мирјана има 245 пријатеља на једној друштвеној мрежи, док их Лидија
   има 218. Када је Мирјана погледала Лидијин профил, видела је да
   имају 114 заједничких пријатеља. Ако би и једна и друга позвале све
   своје пријатеље са те друштвене мреже на концерт, колико различтих
   људи би добило тај позив.


Скуп људи који ће добити позив на концерт можемо поделити на скуп
Мирјаниних пријатеља који нису уједно и Лидијини, на скуп Лидијиних
пријатеља који нису уједно и Мирјанини и на скуп њихових заједничких
пријатеља (ова три скупа су дисјунктна тј. не постоји ни један
пријатељ који је члан више ових скупова). На основу датих података
можемо израчунати колико Мирјана има пријатеља који нису уједно и
Лидијини пријатељи (као разлику укупног броја Мирјаниних пријатеља и
броја њихових заједничких пријатеља). Слично можемо израчунати и број
Лидијини пријатеља који нису уједно и Мирјанини пријатељи. Пошто су
три описана скупа дисјунктна, yкупан број људи који ће бити позвани на
концерт је збир ова два броја и броја заједничких пријатеља који нам
је од почетка познат.
   
.. activecode:: заједнички_пријатељи
   :runortest: mirjanini, lidijini, zajednicki, ukupno
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   mirjanini = 245
   lidijini = 218
   zajednicki = 114
   # -*- acsection: main -*-
   samo_mirjanini = mirjanini - zajednicki
   samo_lidijini = lidijini - zajednicki
   ukupno = 0 # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(ukupno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for mirjanini, lidijini, zajednicki, ukupno in [(200, 200, 100, 300), (150, 130, 80, 200), (73, 42, 15, 100)]:
             self.assertEqual(acMainSection(mirjanini=mirjanini, lidijini=lidijini, zajednicki=zajednicki)["ukupno"],ukupno,
	     "Ако је Мирјана позвала %s пријатеља, Лидија %s, а заједничких је %s, тада је укупно позвано %s људи." % (mirjanini, lidijini, zajednicki, ukupno))
   myTests().main()

   
Приметимо да је задатак могуће решити и једноставније. Наиме скуп људи
који ће добити позив можемо разложити на скуп свих Мирјаниних
пријатеља и скуп свих Лидијиних пријатеља који нису уједно Мирјанини.
Ова два скупа су дисјунктна, тако да је резултат могуће добити као
разлику између збира Мирјаниних и Лидијиних пријатеља и броја њихових
заједничких пријатеља.

.. activecode:: заједнички_пријатељи_1

   mirjanini = 245
   lidijini = 218
   zajednicki = 114
   ukupno = mirjanini + lidijini - zajednicki
   print(ukupno)

Формула коју смо применили у овом задатку назива се *формула
укључења-искључења* и она каже да за било која два скупа A и B важи да
је \|A ∪ B\| = \|A\| + \|B\| - \|A ∩ B\|.
   

Домаћи задатак
--------------

Ова лекција није много тешка, али је прилично обимна, па је сасвим
могуће да неки од приказаних задатака нисте стигли да проанализирате
током часа. Ако има таквих задатака, уради их сада, у склопу домаћег
задатка. Након тога уради и наредне задатке. Додатне задаткеза вежбу
можеш пронаћи `овде <IzracunavanjeZadaci.html>`_.

Израз
'''''
.. level:: 1
   
.. questionnote::

   Збир бројева 23765 и 7825 умањи 45 пута, па добијени број повећај
   за 1609. Колики је резултат?  Задатак реши једним изразом (немој да
   рачунаш пешке).

.. activecode::	израз_2

   print() # у заграде упиши израз

Провери да ли је твој програм израчунао тачно решење.
   
.. fillintheblank:: fill_израз2
		    
   Колико је решење?
   
   - :^2311$: Тачан одговор
     :.*: Покушај поново
   
Тркачи
''''''
.. level:: 1
   
.. questionnote::

   Васа је прешао 2347 метара. Воја 987 метара више од Васе, а Милош два
   пута више од Воје. Колико су метара укупно прешли?

.. activecode:: три_тркача
   :runortest: vasa, ukupno
    
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   vasa  = 2347
   # -*- acsection: main -*-
   # dopuni ovde kod
   # -*- acsection: after-main -*-
   print(ukupno)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for vasa, ukupno in [(2462, 12809), (773, 6053)]:
             self.assertEqual(acMainSection(vasa = vasa)["ukupno"],ukupno,"Ако је Васа претрчао %s метара, укупно су претрчали %s метара." % (vasa, ukupno))
   myTests().main()
   
.. reveal:: тркачи_решење_reveal
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење
   
   .. activecode:: три_тркача_решење
    
      vasa  = 2347
      voja  = vasa + 987
      milos = voja * 2
      ukupno = vasa + voja + milos
      print(ukupno)

Тепих
'''''
.. level:: 2

.. questionnote::

   У средини собе квадратног облика се налази тепих. Ако је позната димензија
   собе у метрима, удаљеност тепиха од зидова, и цена прања по једном квадратном
   метру тепиха, израчунај цену прања целог тепиха. 
   
.. activecode:: тепих
   :runortest: dimenzija_sobe, udaljenost_tepiha, cena_pranja_po_m2, ukupna_cena_pranja
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   dimenzija_sobe = int(input("Unesi dimenziju sobe:"))
   udaljenost_tepiha = int(input("Unesi udaljenost tepiha od zida:"))
   cena_pranja_po_m2 = int(input("Unesi cenu pranja kvadratnog metra tepiha:"))
   # -*- acsection: main -*-
   # zavrsi program
   # -*- acsection: after-main -*-
   print(ukupna_cena_pranja)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for dimenzija_sobe, udaljenost_tepiha, cena_pranja_po_m2, ukupna_cena_pranja in [(6, 2, 120, 480), (4, 1, 150, 600)]:
             self.assertEqual(acMainSection(dimenzija_sobe = dimenzija_sobe, udaljenost_tepiha = udaljenost_tepiha, cena_pranja_po_m2 = cena_pranja_po_m2)["ukupna_cena_pranja"],ukupna_cena_pranja,
	     "Ако је димензија собе %s метара, удаљеност тепиха од зидова %s метара, цена прања по метру квадратном %s динара, тада је укупна цена прања %s динара." % (dimenzija_sobe, udaljenost_tepiha, cena_pranja_po_m2, ukupna_cena_pranja))
   myTests().main()

   
		
Када га покренеш и унесеш бројеве 5, 1 и 15 треба да добијеш
резултат 135. Пробај и да га аутоматски тестираш на основу
тест-примера које смо ти припремили.

Фудбалери и кошаркаши
'''''''''''''''''''''

.. level:: 2

.. questionnote::

   У одељењу има 15 дечака и сви они тренирају или фудбал или
   кошарку. Ако се зна да фудбал тренира 10 ученика, а кошарку тренира
   8 ученика колико је дечака који тренирају оба спорта?


Погледајмо наредну табелу која нам може помоћи да нађемо правило како
се може одредити број дечака који тренирају два спорта (са ф смо
обележили фудбалере, а са к кошаркаше).

+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|ф |ф |ф |ф |ф |ф |ф |ф |ф |ф |  |  |  |  |  |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|  |  |  |  |  |  |  |к |к |к |к |к |к |к |к |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Уместо нуле упиши израз којим можемо да израчунамо број дечака који
тренирају два спорта. Када се програм покрене тестираће се на три
тест-примера.  Тест-примери на којима програм даје тачан резултат биће
обележени зеленом бојом, а они на којима се добија нетачан резултат
биће обележени црвеном бојом. Ако се сва три примера обележе зелено,
значи да је веома вероватно да је твоје решење тачно.

.. activecode:: пресек_спортиста
   :runortest: fudbal, kosarka, ukupno_decaka, dva_sporta
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   ukupno_decaka = int(input("Unesi ukupan broj dečaka: "))
   fudbal = int(input("Unesi broj dečaka koji treniraju fudbal: "))
   kosarka = int(input("Unesi broj dečaka koji treniraju kosarku: "))
   # -*- acsection: main -*-
   # dovrši program izračunavajući broj dečaka koji treniraju dva sporta
   # -*- acsection: after-main -*-
   print(dva_sporta)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for (ukupno_decaka, fudbal, kosarka, dva_sporta) in [(15, 10, 8, 3), (20, 14, 14, 8), (20, 9, 11, 0)]:
             self.assertEqual(acMainSection(ukupno_decaka=ukupno_decaka, fudbal=fudbal, kosarka=kosarka)["dva_sporta"], dva_sporta,
	     "Ако у одељењу од %s ученика има %s фудбалера и %s кошаркаша, онда %s ученика тренирају два спорта." % (ukupno_decaka, fudbal, kosarka, dva_sporta))
   myTests().main()

.. reveal:: пресек_решење
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   Приметимо да се у решењу овог задатка заправо поново може применити
   формула укључења-искључења коју смо извели у претходном. Овај пут
   имамо познат број елемената сваког од два скупа и број елемената
   њихове уније и на основу тога израчунавамо број елемената њиховог
   пресека. Стога је једно могуће решење.
   
   ``dva_sporta = (fudbal + kosarka) - ukupno_decaka``
