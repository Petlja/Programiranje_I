Дефинисање функција
===================

Видели смо колико је корисно када на располагању имамо дате функције
попут ``min``, ``max`` или ``abs``. Сви програмски језици, па и Python
допуштају корисницима да дефинишу своје функције.

У програмима са корњача-графиком смо се срели са дефинисањем
**процедура**, што нам је омогућило да проширимо језик који корњача
разуме и да лакше пишемо програме. Једном када се дефинише процедура,
практично нема разлике између њеног коришћења и коришћења неке од
уграђених наредби, тако да су нам процедуре заправо дале начин да
дефинишемо нове, сложеније наредбе корњачи. **Функције** су веома
сличне процедурама, са главном разликом да функције служе да на основу
улазних вредности израчунају неки резултат и врате га, док процедуре
служе да промене стање програма и обично не враћају никакав резултат.
На пример, `abs` је функција која на основу дате вредности броја
одређује његову апсолутну вредност, док је `kvadrat(a)` процедура која
не враћа никакву вредност већ наређује корњачи да нацрта квадрат на
екрану. `input`, коју смо користили за учитавање са тастатуре је
функција (јер враћа унету вредност), док је `print` процедура (јер не
враћа никакву вредност, већ мења стање програма тј. оно што је
исписано на екрану).

.. infonote::

   Јасна подела на процедуре и функције уведена је у програмском
   језику Pascal. У Python-у се за обе врсте потпрограма користи иста
   кључна реч ``def``, па се стога често не прави разлика између ова
   два облика потпрограма, већ се говори о функцијама које враћају и
   функцију које не враћају вредности.


Примери дефинисања функција
---------------------------

На пример, функција која израчунава обим правоугаоника се може
дефинисати и онда употребити на следећи начин.

.. activecode:: функција_површине_правоугаоника

   def obim_pravougaonika(a, b):
       return 2 * a + 2 * b

   print(obim_pravougaonika(3, 5))
   print(obim_pravougaonika(4.2, 5.7))
   
Дефиниција функције почиње речју ``def`` након тога се наводи назив
функције, затим у заградама наведени улазни параметри функције и
симбол двотачка (``:``).  Након те прве линије наводи се тело
функције, које мора бити мало увучено.  Код најједноставнијих функција
(као што су ове две наведене у примерима) тело функције представља
само наредба ``return`` након које се налази израз који представља
везу између улазних параметара и резултата функције. Код
компликованијих функција у телу се налазе дужа израчунавања, али се и
даље у телу функције (најчешћње на самом крају) налази наредба
``return`` иза које се наводи вредност функције (то може бити и име
променљиве у којој је израчуната резултујућа вредност). Функције се
позивају тако што се наведе њихов назив и у загради вредности
аргумената.

Обим квадрата
'''''''''''''
.. level:: 1

.. questionnote::

   Дефиниши функцију која на основу дужине странице израчунава
   површину квадрата.

   
.. activecode:: површина квадрата

   def povrsina_kvadrata    # dopuni ovaj i naredni red
       return 

   a = int(input("Unesi dužinu stranice kvadrata: "))
   print(povrsina_kvadrata(a))

Површина сложених облика
''''''''''''''''''''''''
.. level:: 2

Размотримо проблем израчунавања површине наредних сложених облика.

.. image:: ../../_images/slozeni_oblik.png
   :width: 300px   
   :align: center

.. image:: ../../_images/slozeni_oblik_polukrugovi.png
   :width: 300px   
   :align: center

Први облик се може разложити на два правоугаоника, један правоугли
троугао и један полукруг, док се површина другог облика може добити
тако што се од површине највећег полукруга одузме површина најмањег, а
дода површина средњег полукруга и површина правоуглог троугла.

Ако једном дефинишемо функције за израчунавање површине сваког од тих
елементарних облика, веома једноставно у главном програму можемо
израчунавати површине разних сложених облика, не размишљајући више о
формулама потребним за израчучнавање површине појединачних облика
(површина правоугаоника страница :math:`a` и :math:`b` израчунава се
по формули :math:`P=a\cdot b`, површина правоуглог троугла чије су
странице које образују прав угао :math:`a` и :math:`b` једнака је
:math:`\frac{a\cdot b}{2}`, јер је тај троугао половина одговарајућег
правоугаоника, а површина круга полупречника :math:`r` може се
израчунати по формули :math:`P = r^2\pi`, где је :math:`pi =
3,1415926...`, а у језику Python се може добити помоћу `math.pi`).

.. activecode:: сложени_облици

   # površina pravougaonika datih stranica
   def P_pravougaonika(a, b):
       return a * b

   # površina pravouglog trougla datih kateta
   def P_pravouglog_trougla(a, b):
       return a * b / 2

   # površina kruga datog poluprečnika
   def P_kruga(r):
       return r * r * math.pi

   # površina polukruga datog prečnika
   def P_polukruga(R):
       return P_kruga(R / 2) / 2

   P1 = (P_pravougaonika(2, 3) + ??? + 
         P_pravouglog_trougla(2, 1) + P_polukruga(3))
   P2 = (P_polukruga(7) - P_polukruga(2) + ??? + 
         P_pravouglog_trougla(???, ???))

   print(P1, P2)
   

Функције са више резултата
--------------------------
У неким ситуацијама функција треба да врати више вредности. На пример,
желимо да претварање центиметара у метре и центиметре опишемо у облику
посебне функције. Резултат тада можемо вратити у облику пара или торке
елемената (више речи о паровима и торкама је дато у поглављу о
представљају података у програмима).

.. activecode:: функција_конверзије_дужине

   def cm_u_mcm(cm):
       return (cm // 100, cm % 100)

   (m, cm) = cm_u_mcm(178)
   print(178, "cm", "=", m, "m", "i", cm, "cm")
   (m, cm) = cm_u_mcm(161)
   print(161, "cm", "=", m, "m", "i", cm, "cm")

Секунде у сате, минуте и секунде
''''''''''''''''''''''''''''''''
.. level:: 2

.. questionnote::

   Напиши функцију која на основу броја секунди протеклих од претходне
   поноћи израчуна тренутно време у сатима, минутима и секундама,
   водећи рачуна да број сати буде између 0 и 23.

У наредној дефиницији функције направљено је неколико грешака. Исправи
је тако да наредни програм да исправне резултате.
   
.. activecode:: функција_конверзије_времена
		
  def sek_u_satminsek(s):
      sek = (s // (60*60)) % 24
      min = (s // 1) % 60
      sat = (s // 60) % 60
      return                  # dopuni ovaj red

  (sat, min, sek) = sek_u_satminsek(1000)
  print(sat, ":", min, ":", sek)
  () = sek_u_satminsek(7200)      # dopuni ovaj red
  print(sat, ":", min, ":", sek)

Када програм покренеш треба да испише ``0 : 16 : 40`` и ``2 : 0 : 0``.

Сврха дефинисања функција
-------------------------

Резимирајмо на крају неколико основних разлога за дефинисање функција.

- Увођењем функција добијају се разумљивији програми (ономе ко чита
  главни програм много је јасније да се у неком делу израчунава обим
  правоугаоника ако у програму види израз ``obim_pravougaonika(2, 5)``
  него ако види израз ``2 * 2 + 2 * 5)``). Када дефинишемо погодне
  функције, главни програм је било много лакше написати.

- Функције помажу да се програм скрати тако што се избегава понављање
  истог програмског кода (ако је тај програмски код дугачак и
  компликован, издвајање у функцију може значајно поједноставити и
  скратити програм). Ако се покаже да је тај део кода често потребно
  мењати (што је често случај у програмирању) то што се код јавља само
  једном (у склопу тела функције) чини одржавање много једноставнијим
  (не морамо измене да правимо на пуно места, већ само на једном).

- Функције помажу и да се неки проблеми реше, тако што омогућавају
  разлагање комплексних проблема на једноставније потпроблеме.


Домаћи задатак
--------------

Уради за домаћи неколико наредних задатака.

Време чекања на станици
'''''''''''''''''''''''
.. level:: 2

.. questionnote::

   Јелена је дошла аутобусом на станицу у s1 сати и m1 минута, док је
   Иванин аутобус стигао у s2 сати и m2 минута. Колико је сати и
   минута она која је прва стигла чекала ону која је друга стигла?

И у овом задатку се тражи да се израчуна растојање између два
временска тренутка за које се не зна који је први, а који други. Као
што смо приказали раније, рачунање растојања се своди на рачунање
апсолутне вредности разлике, а рад са сатима и минутима лакше обављамо
ако прво претворимо све у минуте, затим израчунамо број минута колико
су се чекале и након тога то претворимо у сате и минуте.
   
.. activecode:: чекање_на_станици
   :runortest: s1, m1, s2, m2, s, m
      
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   s1 = int(input())
   m1 = int(input())
   s2 = int(input())
   m2 = int(input())
   # -*- acsection: main -*-
   vreme1 = 0  # pretvori u ovom redu s1 sati i m1 minuta u minute
   vreme2 = 0  # pretvori u ovom redu s2 sati i m2 minuta u minute
   vreme = 0   # izracunaj u ovom redu duzinu cekanja u minutima
   s = 0       # u ovom redu izracunaj broj sati cekanja
   m = 0       # u ovom redu broj minuta cekanja
   # -*- acsection: after-main -*-
   print(s, m)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):

       def testOne(self):
          for (s1, m1, s2, m2, s, m) in [(9, 35, 12, 12, 2, 37), (11, 40, 12, 10, 0, 30), (10, 15, 8, 50, 1, 25)]:
             self.assertEqual((acMainSection(s1 = s1, m1 = m1, s2 = s2, m2 = m2)["s"], acMainSection(s1 = s1, m1 = m1, s2 = s2, m2 = m2)["m"]),  (s, m) ,"Ако је Јелена стигла у %s:%s, а Ивана у %s:%s, онда је Јелена чекала Ивану %s сата и %s минута." % (s1, m1, s2, m2, s, m))
   myTests().main()

.. reveal:: чекање_на_станици_решење1
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: чекање_на_станици_решење2
		
      s1 = int(input())
      m1 = int(input())
      s2 = int(input())
      m2 = int(input())
      vreme1 = s1*60 + m1
      vreme2 = s2*60 + m2
      vreme = abs(vreme1 - vreme2)
      s = vreme // 60
      m = vreme % 60
      print(s, "sati i", m, "minuta")

Месечне промене плате
'''''''''''''''''''''
.. level:: 2

.. questionnote::

   Основна плата једног радника у првом месецу била је 48.375
   динара. У наредном месецу је повећана за 10%, затим је у наредном
   месецу смањена за 5%, а затим је у наредном месецу опет повећана за
   15%. Приликом сваке промене, плата је заокруживана на најближи цео
   број динара. Колико је износила плата тог радника у четвртом
   месецу?

Формулу за промену новчаног износа за одређени проценат смо већ раније
разматрали. Ако се плата :math:`P` увећава за :math:`p\%` тада је нови
износ једнак :math:`P \cdot (1 + \frac{p}{100})`. Након овога,
потребно је додатно заокружити износ на најближи цео број коришћењем
функције `round`. Пошто је формула компликована, уместо да је више
пута користимо у програму, много је боље издвојити је у посебну
функцију.

Допуни дефиницију те функције, и затим исправи аргументе у њеним
позивима у складу са текстом задатка. Провери на крају да ли је
резултат који добијеш тачан.
   
.. activecode:: промена_плате

   def promena_plate(plata, procenat):
       return int(round(plata * (1)))

   plata1 = 48375
   plata2 = promena_plate(plata1, 0)
   plata3 = promena_plate(plata2, 0)
   plata4 = promena_plate(plata3, 0)
   print(plata4)

.. fillintheblank:: fill_тврђава0

      Плата у четвртом месецу је |blank|

      -     :58135|58135[.]0+: Тачно!
            :x: Примени формулу ``plata * (1 + posto / 100)``. Za smanjenje plate stavi negativan broj procenata.

Просек 3 броја
''''''''''''''
.. level:: 2

.. questionnote::

   Димитрије, Ања, Ивона и Марко су високи редом 165, 162, 158 и
   171 cm. Пријављују трочлану екипу за школски турнир у кошарци и у
   формулару је неопходно да наведу просечну висину своје екипе, али
   се још нису одлучили ко ће сачињавати екипу. Дефиниши функцију за
   израчунавање просека три броја, а затим испиши просечне висине за
   сваку од 4 могуће варијанте трочлане екипе.

   
.. activecode:: просек3броја

   # definiši funkciju prosek koja izračunava prosek 3 data broja
   def ...

   dimitrije = 165
   anja = 162
   ivona = 158
   marko = 171
   print("Anja, Ivona, Marko:", prosek(anja, ivona, marko))
   print("Dimitrije, Ivona, Marko:", prosek(dimitrije, ivona, marko))
   # dopuni program za preostale dve kombinacije
