10.2. Целобројно дељење - позициони запис броја
------------------------------------------------

Ако је укупан број центиметара био 123, тада је број метара 1, број
дециметара 2 и број центиметара 3. Решавањем претходног задатка смо
заправо одређивали појединачне цифре коришћене у запису тог
троцифреног броја. Приказана техника може бити уопштена тако да се
одређују све цифре и у запису дужих бројева.


Цифре броја
'''''''''''
.. level:: 2

.. questionnote::

   Чест начин откривања грешака при слању података је да се уз податке
   које треба послати, пошаљу и одређени контролни подаци, израчунати
   на основу основних података које шаљемо. Када прималац прими податке, он на основу
   примљених података поново израчунава контролне податке и упоређује
   их са контролним подацима које је примио. Ако се приликом преноса
   података, услед неких сметњи, подаци случајно измене, прималац
   то може приметити тако што ће видети да се контролни подаци које је он
   израчунао не поклапају са онима које је примио. Сви подаци се у
   рачунарима представљају помоћу бројева, а још од најранијег доба
   рачунарства као метода контроле коришћен је збир цифара. На пример,
   ако би податак који се шаље био број 12345, онда би се уз њега слао
   и контролни број 15 (збир 1 + 2 + 3 + 4 + 5). Ако би приликом слања
   нека цифра била случајно промењена (на пример, ако би прималац
   грешком примио број 12335) тада би се и контролни број
   највероватније разликовао (контролни број би у нашем примеру био
   14). Напиши програм који за дати петоцифрени број одређује његов
   контролни број (збир његових цифара).

.. activecode:: цифре_броја
   :runortest: broj, kontrolni_broj
   :enablecopy:
		
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   broj = 12345
   # -*- acsection: main -*-
   c0 = (broj // 1) % 10
   c1 = (broj // 10) % 10
   c2 = 0 # ispravi ovaj red
   c3 = (broj // 1000) % 10
   c4 = 0 # ispravi ovaj red
   kontrolni_broj = c0 + c1 + c2 + c3 + c4
   # -*- acsection: after-main -*-
   print(kontrolni_broj)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for broj, kontrolni_broj in [(71425, 19), (33214, 13), (62040, 12)]:
             self.assertEqual(acMainSection(broj = broj)["kontrolni_broj"],kontrolni_broj,"За број %s контролни број је %s." % (broj, kontrolni_broj))
   myTests().main()
   

Приметимо да смо цифре броја одређивали веома слично као у претходном
задатку.  Цифре одређујемо сдесна налево, тако што делимо број
тежином цифре (за цифру јединица број делимо са 1, десетица са 10,
стотина са 100 итд.) и проналазимо остатак при дељењу са 10.

.. infonote::

   Људи су контролу података примењивали и ручно, а сада рачунари
   обављају такве контроле у овиру прецизно задатих поступака –
   *протокола за размену података*. Иако је контролни збир
   најједноставнији начин контроле, он не може да открије грешке до
   којих може доћи услед случајне промене редоследа цифара (на пример,
   ако се уместо броја 12345 грешком пошаље број 12435, контролни збир
   оба броја ће бити исти и грешка неће бити примећена). Зато се
   уместо збира понекад користе изрази облика :math:`c_0 + 2c_1 +
   3c_2 + 4c_3 + 5c_4`. Покушај да измениш претходни програм тако да
   израчунава контролни број на овај начин.


Целобројно дељење - време и углови
''''''''''''''''''''''''''''''''''

За разлику од бројева и јединица мере које записујемо у систему чија
је основа 10, при раду са временом и угловима користимо систем чија је
основа број 60. Тако један сат има 60 минута, а један минут 60
секунди. Слично један степен има 60 угаоних минута, а један угаони
минут има 60 угаоних секунди. Прикажимо сада кроз неколико задатака
како можемо у програмима вршити израчунавања у којима учествују време
и углови.

Конверзија сати и минута у минуте и обратно
'''''''''''''''''''''''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Ако се зна колико је тренутно сати и минута, израчунај колико је
   минута протекло од претходне поноћи.

Пошто у једном сату има 60 минута, довољно је да помоножиш број сати
са 60 и на то да додаш број минута.

.. activecode:: сати_и_минути_у_минуте
   :runortest: sati, minuta, minuta_od_ponoci
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   sati = 2
   minuta = 60
   # -*- acsection: main -*-
   minuta_od_ponoci = 0 # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(minuta_od_ponoci)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for sati, minuta, minuta_od_ponoci in [(14, 19, 859), (11, 13, 673), (23, 59, 1439)]:
             self.assertEqual(acMainSection(sati = sati, minuta = minuta)["minuta_od_ponoci"],minuta_od_ponoci,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
   myTests().main()
   
   
.. questionnote::

   Ако се зна колико је минута протекло од претходне поноћи, израчунај
   колико је тренутно сати и минута.

Ако са :math:`s` обележимо тренутни број сати, са :math:`m` тренутни
број минута, а са :math:`M` број минута протеклих од поноћи, тада важи
да је :math:`M = s \cdot 60 + m`, при чему за :math:`m` важи да је
број између :math:`0` и :math:`59`, што јасно указује на то да се
тражене вредности могу израчунати применом целобројног дељења.
   
.. activecode:: минути_у_сате_и_минуте
   :runortest: minuta_od_ponoci, sati, minuta
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   minuta_od_ponoci = 125
   # -*- acsection: main -*-
   sati = 0     # ispravi ovaj red
   minuta = 0   # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(sati, minuta)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for sati, minuta, minuta_od_ponoci in [(14, 19, 859), (11, 13, 673), (23, 59, 1439)]:
             self.assertEqual(acMainSection(minuta_od_ponoci = minuta_od_ponoci)["sati"],sati,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
             self.assertEqual(acMainSection(minuta_od_ponoci = minuta_od_ponoci)["minuta"],minuta,"У %s:%s протекло је %s минута од поноћи." % (sati, minuta, minuta_od_ponoci))
   myTests().main()

Аутобус
'''''''
.. level:: 2

.. questionnote:: 

  Aутобус је кренуо са станице у 6 часова и 17 минута и путовао је 2
  сата и 55 минута. У колико сати и минута је стигао?

.. activecode::  време_путовања

   # sat i munut kada je autobus krenuo
   krenuo_sat = 6
   krenuo_min = 17
   # broj sati i minuta koliko je autobus putovao
   putovao_sat = 2
   putovao_min = 55
   # sabiramo minute i prenosimo sate ako je potrebno (ako su minuti bar 60)
   stigao_min = (krenuo_min + putovao_min) % 60;
   prenos = (krenuo_min + putovao_min) // 60;
   # sabiramo sate dodajuci prenos minuta
   stigao_sat = krenuo_sat + putovao_sat + prenos;
   print(stigao_sat, stigao_min)

Други начин да се реши задатак је да се прво све прерачуна у минуте,
да се сабирање изврши у минутима, а да се затим добијени минути
претворе назад у сате и минуте. Приликом превођења неког временског
тренутка у минуте израчунавамо заправо број минута протеклих од
претходне поноћи (или поднева, ако се сати рачунају само до 12). Тај
број минута се може добити тако што се број сати помножи бројем 60
(јер у једном сату има 60 минута) и на то дода број минута.
   
.. activecode:: време_путовања_1

   # sat i minut kada je autobus krenuo		
   krenuo_sat = 6
   krenuo_min = 17
   # broj sati i minuta koliko je autobus putovao
   putovao_sat = 2
   putovao_min = 55
   # trenutak polaska u minutima
   krenuo_u_minutima = krenuo_sat * 60 + krenuo_min
   # trajanje putovanja u minutima
   putovao_u_minutima = putovao_sat * 60 + putovao_min
   # trenutak dolaska u minutima
   stigao_u_minutima = krenuo_u_minutima + putovao_u_minutima
   # sat i minut dolaska
   stigao_sat = stigao_u_minutima // 60
   stigao_min = stigao_u_minutima % 60
   print(stigao_sat, stigao_min)

Криви торањ у Пизи
''''''''''''''''''
.. level:: 2

.. questionnote::

   Криви торањ у Пизи је нагнут и са земљом заклапа угао од 86 степени
   и 3 минута. Колико степени и минута је торањ нагнут, то јест,
   колико одступа од усправног положаја.


Прав угао има 90 степени тј. 90·60 минута. Ако угао од 86 степени и 3
минута преведемо у минуте и одузмемо га од правог угла добићемо
тражени угао у минутима. На крају ћемо израчунати целобројни количник
и остатак при дељењу са 60 и тако добити тражени угао у степенима и минутама. Рецимо
још да смо у овом задатку заправо одређивали комплемент датог угла,
што је операција о којој је сигурно било речи на часовима математике.
Пошто се торањ с временом криви, твој програм треба исправно да ради и
ако је угао мало другачји.
   
.. activecode:: криви_торањ
   :runortest: alfa_stepeni, alfa_minuti, beta_stepeni, beta_minuti
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   # ugao između tornja i zemlje u stepenima i minutima
   alfa_stepeni = 86
   alfa_minuti = 3
   # -*- acsection: main -*-
   # prevodimo taj ugao u minute
   alfa_u_minutima = 0      # ispravi ovaj red
   # prav ugao u minutima
   prav_u_minutima = 90 * 60
   # komplement ugla u minutima
   beta_u_minutima = prav_u_minutima - alfa_u_minutima
   # komplement ugla u stepenima i minutima
   beta_stepeni = 0         # ispravi ovaj red
   beta_minuti = 0          # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(beta_stepeni, "stepenа i", beta_minuti, "minuta")
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for (alfa_stepeni, alfa_minuti, beta_stepeni, beta_minuti) in [(86, 37, 3, 23), (85, 19, 4, 41)]:
             self.assertEqual(acMainSection(alfa_stepeni = alfa_stepeni, alfa_minuti = alfa_minuti)["beta_stepeni"],beta_stepeni,"Комплемент угла %s:%s је %s:%s." % (alfa_stepeni, alfa_minuti, beta_stepeni, beta_minuti))
             self.assertEqual(acMainSection(alfa_stepeni = alfa_stepeni, alfa_minuti = alfa_minuti)["beta_minuti"],beta_minuti,"Комплемент угла %s:%s је %s:%s." % (alfa_stepeni, alfa_minuti, beta_stepeni, beta_minuti))
   myTests().main()
     

Домаћи задатак
'''''''''''''''

Ако на часу нисте стигли да урадите све задатке, уради их сада, у
склопу домаћег задатка. Након тога покушај да урадиш и наредних
неколико задатака.


Прочитане стране књиге
''''''''''''''''''''''
.. level:: 1

.. questionnote::

   Књига има 282 стране. Марко је првог дана прочитао трећину, другог
   дана половину остатка, а трећег књигу прочитао до краја. Колико
   страна је прочитао ког дана? Напиши програм тако да исправно ради
   и ако је број страна првог дана другачији.

.. activecode:: Читање
   :runortest: broj_strana, prvi_dan, drugi_dan, treci_dan
   :enablecopy:

   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   broj_strana = 282
   # -*- acsection: main -*-
   prvi_dan = 0      # ispravi ovaj red
   drugi_dan = 0     # ispravi ovaj red
   treci_dan = 0     # ispravi ovaj red
   # -*- acsection: after-main -*-
   print(prvi_dan, drugi_dan, treci_dan)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for broj_strana, dan in [(369, 123), (333, 111)]:
             self.assertEqual(acMainSection(broj_strana = broj_strana)["prvi_dan"],dan,"Ако књига има %s страна, први дан је прочитано %s страна." % (broj_strana,dan))
             self.assertEqual(acMainSection(broj_strana = broj_strana)["drugi_dan"],dan,"Ако књига има %s страна, други дан је прочитано %s страна." % (broj_strana,dan))
             self.assertEqual(acMainSection(broj_strana = broj_strana)["treci_dan"],dan,"Ако књига има %s страна, трећи дан је прочитано %s страна." % (broj_strana,dan))
   myTests().main()
   

.. reveal:: пресек_решење11
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   Марко је прочитао 94 стране сваког дана. Првог дана је прочитао
   трећину и остале су му две трећине. Другог дана је прочитао пола од
   тога тј. опет трећину и за трећи дан му је остала последња трећина.
	       
   .. activecode:: Читање_решење

      broj_strana = 282		
      prvi_dan = broj_strana / 3
      drugi_dan = (broj_strana - prvi_dan) / 2
      treci_dan = broj_strana - prvi_dan - drugi_dan
      print(treci_dan)

      

Повећање и смањење плата
''''''''''''''''''''''''
.. level:: 2

Ево опет једног сличног задатка за вежбу.

.. questionnote::

   Плате су прво смањене за десет процената, а онда су после неколико
   месеци те смањене плате повећане за 10 процената. Ако је у почетку
   плата била 50,000 динара, колика је она после смањења и повећања?

.. activecode:: плате
   :runortest: plata, povecana_plata
   :enablecopy:
      
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   plata = 50000
   # -*- acsection: main -*-
   smanjena_plata = 0  # popravi ovaj red
   povecana_plata = 0  # popravi ovaj red
   # -*- acsection: after-main -*-
   print(povecana_plata)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for plata, povecana_plata in [(45123, 44671.77), (54321, 53777.79)]:
             self.assertEqual(acMainSection(plata = plata)["povecana_plata"],povecana_plata,"Ако је плата била %s динара, после повећања она износи %s динара." % (plata,povecana_plata))
   myTests().main()

   
Ако добијеш решење 49,500 значи да је све како треба, иако је тај
резултат мало неочекиван. Често се помисли да ће смањење и повећање за
по 10% да се пониште и да ће се плата вратити на полазну
вредност. Међутим, смањење је било 10% полазне величине од 50,000
динара тј. за 5,000 динара, док је повећање за 10% од смањене величине
од 45,000 динара тј. повећање је за 450 динара.
   
.. reveal:: пресек_решење21
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: плате_решење

      plata = 50000
      smanjena_plata = plata - (10 / 100) * plata
      povecana_plata = smanjena_plata + (10 / 100) * smanjena_plata
      print(povecana_plata)

Преостало време видео-снимка
''''''''''''''''''''''''''''
.. level:: 2

.. questionnote::

   Апликација за пуштање видео-снимака нуди опцију приказа преосталог
   времена до краја снимка. Ако је познато трајање снимка у сатима,
   минутима и секундама и време протекло од почетка снимка, такође
   задато у сатима, минутима и секундама напиши програм који израчунава
   време до краја у сатима, минутима и секундама.

Најлакши начин да решиш задатак је да оба позната времена претвориш у
секунде, затим да тражено време израчунаш у секундама, а онда да
добијени резултат претвориш у сате, минуте и секунде. 

.. activecode:: време_до_краја_видеа
   :runortest: trajanje_sati, trajanje_minuta, trajanje_sekundi, od_pocetka_sati, od_pocetka_minuta, od_pocetka_sekundi, preostalo_sati, preostalo_minuta, preostalo_sekundi
   :enablecopy:
		
   # -*- acsection: general-init -*-
   # -*- acsection: var-init -*-
   trajanje_sati = 1
   trajanje_minuta = 23
   trajanje_sekundi = 14
   
   od_pocetka_sati = 0
   od_pocetka_minuta = 47
   od_pocetka_sekundi = 53

   # -*- acsection: main -*-
   # izracunaj trajanje u sekundama
   trajanje = 0
   
   # izracunaj vreme od pocetka videa u sekundama
   od_pocetka = 0

   # izracunaj preostalo vreme u sekundama
   preostalo = 0
   # preracunaj to vreme u sate, minute i sekunde
   preostalo_sati = 0
   preostalo_minuta = 0
   preostalo_sekundi = 0
   
   # -*- acsection: after-main -*-
   print(preostalo_sati, ":", preostalo_minuta, ":", preostalo_sekundi)
   ====
   from unittest.gui import TestCaseGui
   class myTests(TestCaseGui):
       def testOne(self):
          for (trajanje_sati, trajanje_minuta, trajanje_sekundi, od_pocetka_sati, od_pocetka_minuta, od_pocetka_sekundi, preostalo_sati, preostalo_minuta, preostalo_sekundi) in [(2, 54, 15, 1, 48, 29, 1, 5, 46), (1, 44, 13, 0, 0, 19, 1, 43, 54)]:
             self.assertEqual(acMainSection(trajanje_sati = trajanje_sati, trajanje_minuta = trajanje_minuta, trajanje_sekundi = trajanje_sekundi, od_pocetka_sati = od_pocetka_sati, od_pocetka_minuta = od_pocetka_minuta, od_pocetka_sekundi = od_pocetka_sekundi)["preostalo_sati"],preostalo_sati,"Ако је трајање (%s, %s, %s), а од почетка је протекло (%s, %s, %s), тада је преостало (%s, %s, %s)." % (trajanje_sati, trajanje_minuta, trajanje_sekundi, od_pocetka_sati, od_pocetka_minuta, od_pocetka_sekundi, preostalo_sati, preostalo_minuta, preostalo_sekundi))
             self.assertEqual(acMainSection(trajanje_sati = trajanje_sati, trajanje_minuta = trajanje_minuta, trajanje_sekundi = trajanje_sekundi, od_pocetka_sati = od_pocetka_sati, od_pocetka_minuta = od_pocetka_minuta, od_pocetka_sekundi = od_pocetka_sekundi)["preostalo_minuta"],preostalo_minuta,"Ако је трајање (%s, %s, %s), а од почетка је протекло (%s, %s, %s), тада је преостало (%s, %s, %s)." % (trajanje_sati, trajanje_minuta, trajanje_sekundi, od_pocetka_sati, od_pocetka_minuta, od_pocetka_sekundi, preostalo_sati, preostalo_minuta, preostalo_sekundi))
             self.assertEqual(acMainSection(trajanje_sati = trajanje_sati, trajanje_minuta = trajanje_minuta, trajanje_sekundi = trajanje_sekundi, od_pocetka_sati = od_pocetka_sati, od_pocetka_minuta = od_pocetka_minuta, od_pocetka_sekundi = od_pocetka_sekundi)["preostalo_sekundi"],preostalo_sekundi,"Ако је трајање (%s, %s, %s), а од почетка је протекло (%s, %s, %s), тада је преостало (%s, %s, %s)." % (trajanje_sati, trajanje_minuta, trajanje_sekundi, od_pocetka_sati, od_pocetka_minuta, od_pocetka_sekundi, preostalo_sati, preostalo_minuta, preostalo_sekundi))
   myTests().main()

Ако урадиш све како треба, добићеш да је преостало ``0 : 35 :
21``. Провери и на другим тест-примерима.

.. reveal:: пресек_решење41
   :showtitle: Прикажи решење
   :hidetitle: Сакриј решење

   .. activecode:: време_до_краја_видеа_решење

      # ukupno vreme trajanja videa
      trajanje_sati = 1
      trajanje_minuta = 23
      trajanje_sekundi = 14
      
      # vreme proteklo od pocetka videa
      od_pocetka_sati = 0
      od_pocetka_minuta = 47
      od_pocetka_sekundi = 53

      # izracunaj trajanje u sekundama
      trajanje = (trajanje_sati*60 + trajanje_minuta)*60 + trajanje_sekundi
      
      # izracunaj vreme od_pocetka od pocetka videa u sekundama
      od_pocetka = (od_pocetka_sati*60 + od_pocetka_minuta)*60 + od_pocetka_sekundi
    
      # izracunaj preostalo vreme do kraja videa u sekundama
      preostalo = trajanje - od_pocetka
      # preracunaj to vreme u sate, minute i sekunde
      preostalo_sati = preostalo // (60 * 60)
      preostalo_minuta = (preostalo // 60) % 60
      preostalo_sekundi = preostalo % 60
      
      print(preostalo_sati, ":", preostalo_minuta, ":", preostalo_sekundi)

